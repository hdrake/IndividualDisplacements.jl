var documenterSearchIndex = {"docs":
[{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/worldwide/global_ocean_circulation.jl\"","category":"page"},{"location":"worldwide/global_ocean_circulation/#Global-Climatology","page":"Global Climatology","title":"Global Climatology","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"(Image: ) (Image: )","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"Advect particles with climatological monthly mean flow at selected depth level (e.g. k=10 for 95 m) from a global ocean state estimate (ECCO v4 r2 ; see also https://ecco-group.org) which is here repeated for ny years. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Get-Software-and-Iput-Files","page":"Global Climatology","title":"1. Get Software & Iput Files","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"packages + helper functions\ngrid and velocity files","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"using IndividualDisplacements, MeshArrays, OrdinaryDiffEq\nusing Statistics, DataFrames, MITgcmTools, OceanStateEstimation\n\ninclude(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/helper_functions.jl\"))\nIndividualDisplacements.get_ecco_velocity_if_needed();\nnothing #hide","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Set-Up-Parameters-and-Inputs","page":"Global Climatology","title":"2. Set Up Parameters & Inputs","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"select vertical level & duration in years\nread grid variables & velocities\nnormalize velocities","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùëÉ=setup_global_ocean(k=1,ny=2);\n\nkeys(ùëÉ)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Main-Computation-Loop","page":"Global Climatology","title":"3. Main Computation Loop","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/#.1-Initialize-Individuals-and-Solution","page":"Global Climatology","title":"3.1 Initialize Individuals & Solution","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"initial particle positions randomly over Global Ocean","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"xy=init_global_randn(1000,ùëÉ); id=collect(1:size(xy,2))\nùêº = Individuals{Float64}(üìå=xy[:,:], üÜî=id, üîß=postprocess_lonlat, üöÑ = dxy_dt!, ùëÉ=ùëÉ)\n\nfieldnames(typeof(ùêº))","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"initial integration from time 0 to 0.5 month","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.2-Iteration-function-example","page":"Global Climatology","title":"3.2 Iteration function example","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùêº.ùëÉ.üîÑ(ùêº.ùëÉ,t_œµ) resets the velocity input streams to bracket t_œµ=ùêº.ùëÉ.ùëá[2]+eps(ùêº.ùëÉ.ùëá[2])\nreset_lonlat!(ùêº) randomly selects a fraction (defined in setup_global_ocean()) of the particles and resets their positions before each integration period. This can maintain homogeneous coverage of the Global Ocean by particles.\n‚à´!(ùêº,ùëá) then solves for the individual trajectories over one month, after updating velocity fields (ùêº.u0 etc) if needed, and adds diagnostics to the DataFrame used to record / trace variables along the trajectory (ùêº.tr).","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"function step!(ùêº::Individuals)\n    t_œµ=ùêº.ùëÉ.ùëá[2]+eps(ùêº.ùëÉ.ùëá[2])\n    ùêº.ùëÉ.üîÑ(ùêº.ùëÉ,t_œµ)\n    reset_lonlat!(ùêº)\n    ùëá=Tuple(ùêº.ùëÉ.ùëá)\n    ‚à´!(ùêº,ùëá)\nend","category":"page"},{"location":"worldwide/global_ocean_circulation/#.3-Iterate-For-ny*12-Months","page":"Global Climatology","title":"3.3 Iterate For ny*12 Months","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"[step!(ùêº) for y=1:2, m=1:12]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.4-Compute-summary-statistics","page":"Global Climatology","title":"3.4 Compute summary statistics","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"See DataFrames.jl documentation for detail and additinal functionalities.","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"gdf = groupby(ùêº.üî¥, :ID)\nsgdf= combine(gdf,nrow,:lat => mean)\nsgdf[rand(1:size(sgdf,1),4),:]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Plot-trajectories-/-individual-positions","page":"Global Climatology","title":"4. Plot trajectories / individual positions","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"using Plots\np=plot(;xlims=(-180,180),ylims=(-90,90),legend=:none)\np!(x,y)=scatter!(p,x,y,markersize=1.1,markerstrokewidth=0)\n[p!(gdf[i].lon,gdf[i].lat) for i in rand(collect(1:length(gdf)),10)]\ndisplay(p)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"Or select a background map (e.g. lon, lat, and DL=log10(bottom depth)) and a recipe to superimpose initial and final locations. Try:","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"#```\n#include(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/recipes_plots.jl\"))\n#plot_end_points(ùêº,ùêº.ùëÉ.Œì)\n#```","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/solid_body_rotation.jl\"","category":"page"},{"location":"basics/solid_body_rotation/#Single-Particle","page":"Single Particle","title":"Single Particle","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Simulate the trajectory of an individual point, first in a perfectly circular flow (a.k.a. solid body rotation). Then add a convergent term to obtain a spiraling trajectory, and a constant vertical velocity for the third dimension. These simple flow configurations can be thought of as idealized models e.g. ocean meso-scale eddies.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"(Image: solid body rotation)","category":"page"},{"location":"basics/solid_body_rotation/#Problem-Configuration","page":"Single Particle","title":"1 Problem Configuration","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Here we set up software, grid, flow fields, initial conditions.","category":"page"},{"location":"basics/solid_body_rotation/#.1-Import-Software","page":"Single Particle","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"using OrdinaryDiffEq, Plots, DataFrames\nusing IndividualDisplacements, MeshArrays","category":"page"},{"location":"basics/solid_body_rotation/#.2-Gridded-Domain","page":"Single Particle","title":"1.2  Gridded Domain","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"np,nz=16,4 #horizontal and vertical domain size\nŒì=simple_periodic_domain(np)\nŒ≥=Œì[\"XC\"].grid;\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.3-Velocity-Fields","page":"Single Particle","title":"1.3 Velocity Fields","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"#Solid-body rotation around central location ...\ni=Int(np/2+1)\nu=-(Œì[\"YG\"].-Œì[\"YG\"][1][i,i])\nv=(Œì[\"XG\"].-Œì[\"XG\"][1][i,i])\n\n#... plus a convergent term to / from central location\nd=-0.01\nu=u+d*(Œì[\"XG\"].-Œì[\"XG\"][1][i,i])\nv=v+d*(Œì[\"YG\"].-Œì[\"YG\"][1][i,i])\n\n#Replicate u,v in vertical dimension\nuu=MeshArray(Œ≥,Œ≥.ioPrec,nz)\n[uu[k]=u[1] for k=1:nz]\nvv=MeshArray(Œ≥,Œ≥.ioPrec,nz)\n[vv[k]=v[1] for k=1:nz]\n\n#Vertical velocity component w\nw=fill(1.0,MeshArray(Œ≥,Œ≥.ioPrec,nz));\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.4-Initial-Positions","page":"Single Particle","title":"1.4 Initial Positions","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"üìå=[np*1/3,np*1/3,nz*1/3]","category":"page"},{"location":"basics/solid_body_rotation/#Trajectory-Simulations","page":"Single Particle","title":"2 Trajectory Simulations","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Here we turn our problem configuration in a struct (Individuals) which contains the initial positions, flow fields, and all that will be necesssary to compute trajectories over time (‚à´!(ùêº,ùëá)).","category":"page"},{"location":"basics/solid_body_rotation/#.1-Setup-Individuals","page":"Single Particle","title":"2.1 Setup Individuals","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"ùëÉ=(u0=uu, u1=uu, v0=vv, v1=vv,w0=0.0*w, w1=-0.01*w, ùëá=[0,19.95*2*pi], ioSize=(np,np,nz))\n\ntr = DataFrame([fill(Int, 1) ; fill(Float64, 4)], [:ID, :x, :y, :z, :t])\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-8)\n\nfunction postproc(sol,ùëÉ::NamedTuple;id=missing,ùëá=missing)\n    df=postprocess_xy(sol,ùëÉ,id=id,ùëá=ùëá)\n    #add third coordinate\n    z=sol[3,:,:]\n    df.z=z[:]\n    return df\n end\n\nùêº = Individuals{Float64}(üìå=üìå[:,:], üî¥=tr, üÜî=collect(1:size(üìå,2)),\n                         üöÑ = dxyz_dt, ‚à´ = solv, üîß = postproc, ùëÉ=ùëÉ);\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.2-Compute-Trajectories","page":"Single Particle","title":"2.2 Compute Trajectories","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"The ‚à´! function call below returns the final positions & updates ùêº.üìå accordingly. It also records properties observed along the trajectory in ùêº.üî¥","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"basics/solid_body_rotation/#.3-Visualize-Trajectories","page":"Single Particle","title":"2.3 Visualize Trajectories","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"define myplot convenience function\ngenerate animation using myplot\nsingle plot example using myplot","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"myplot(i)=plot(ùêº.üî¥.x[1:i],ùêº.üî¥.y[1:i],ùêº.üî¥.z[1:i],linewidth=2,arrow = 2,\n    title=\"Solid body rotation / Spiral example\",leg=false,\n    xaxis=\"x\",yaxis=\"y\",zaxis=\"z\",xlims=(0,np),ylims=(0,np));\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Animation example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"nt=length(ùêº.üî¥.x)\np=Int(ceil(nt/100))\nanim = @animate for i ‚àà 1:p:nt\n    myplot(i)\nend\n\npth=tempdir()*\"/\"\ngif(anim, pth*\"SolidBodyRotation.gif\", fps = 15)","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Single plot example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"plt=myplot(nt)\nscatter!(plt,[üìå[1]],[üìå[2]],[üìå[3]])\n#scatter!(plt,[ùêº.üî¥.x[end]],[ùêº.üî¥.y[end]],[ùêº.üî¥.z[end]])\nscatter!(plt,[ùêº.üìå[1]],[ùêº.üìå[2]],[ùêº.üìå[3]])","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#solid_body_rotation.jl","page":"Examples","title":"solid_body_rotation.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"An idealized flow example, based on solid body rotation, also useful for unit testing.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: SolidBodyRotation)","category":"page"},{"location":"examples/#random_flow_field.jl","page":"Examples","title":"random_flow_field.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A random flow field is generated on a doubly periodic grid, and used to advect a cloud of points. This illustrates defining a grid from scracth, and then simulating many trajectories at once.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: RandomFlow)","category":"page"},{"location":"examples/#global_ocean_circulation.jl","page":"Examples","title":"global_ocean_circulation.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A simulation over the global ocean based on a data-constrained,realistic, model:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"examples/#More-Examples","page":"Examples","title":"More Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Two examples which reproduce trajectories computed by an earlier implementation in Fortran (MITgcm/pkg/flt): detailed_look.jl illustrates package features in more detail; particle_cloud.jl illustrates a computation of many trajectories at once. Also: example123.jl, helper_functions.jl, example_CyclicArray.jl","category":"page"},{"location":"examples/#Plotting-Recipes","page":"Examples","title":"Plotting Recipes","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Examples using three popular plotting packages (see recipes_plots.jl, recipes_makie.jl, recipes_pyplot.jl) are provided in the various notebooks.","category":"page"},{"location":"examples/#Tool-Boxes","page":"Examples","title":"Tool Boxes","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Velocity functions, interpolating from gridded fields, for different array types.\nPreprocessing and postprocessing methods.\nI/O routines to read / write results from / to file.","category":"page"},{"location":"workflow/#Typical-Workflow","page":"User Guide","title":"Typical Workflow","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"As seen in the examples, the typical worflow is:","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"set up Individuals\ndisplace them via ‚à´!\npost-process / analyze / plot\ngo back to 2 and continue","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"where steps 3 and 4 are optional. ","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"In fact, step 2 also readily provides the option to post-process results in üî¥ via üîß within ‚à´! ‚Äì üîß is called just before updating the individual positions üìå and exiting ‚à´!. Since üî¥ is in the DataFrames tabular format, it is easily manipulated or plotted. ","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"Please refer to the examples section for more on e.g. the use of time varying flow fields, three-dimensional Ocean trajectory simulations, process oriented configurations, as well as plotting and data formats.","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"A central goal of this package is to support scientific analysis of climate model output and observed drifts of e.g. plastics in the Ocean or chemical coumponds in the Atmosphere. ","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"To start, the package supports all types of gridded model output MIT General Circulation Model by exploiting the MeshArrays.jl package (docs). The üöÑ funtions documented as part of the Tool Box perform the interpolation from gridded output to positions üìå.","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"The Tool Box section also provides functions to ingest trajectory data which have been collected by the Ocean Drifting Buoy Program over the real Ocean (movie).","category":"page"},{"location":"workflow/#Data-Structures","page":"User Guide","title":"Data Structures","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"The Individuals struct contains velocity fields (arrays), etc, and a record of properties diagnozed along the way.","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"Modules = [IndividualDisplacements]\nOrder   = [:type]","category":"page"},{"location":"workflow/#IndividualDisplacements.Individuals","page":"User Guide","title":"IndividualDisplacements.Individuals","text":"struct Individuals{T}\n\nData:           üìå (position),   üî¥(record),           üÜî (ID)\nFunctions:      üöÑ (velocity),   ‚à´ (integration), üîß(postprocessing)\nNamedTuples:    ùëÉ  (parameters), ùê∑ (diagnostics),      ùëÄ (metadata)\n\nDefault keyword constructor example:\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nùêº=Individuals{Float64}(üìå=zeros(3,10),üÜî=1:10,üî¥=deepcopy(df))\nùêº=Individuals(üìå=zeros(3,2),üÜî=collect(1:2),üî¥=deepcopy(df))\n\nPlain text (or no-unicode) constructor example:\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nI=(position=zeros(3,2),ID=1:2,record=deepcopy(df))\nI=Individuals(I)\n\nKeyword cheatsheet:\n\nüìå=\\:pushpin:<tab>,        üî¥=\\:red_circle:<tab>, üÜî=\\:id:<tab>\nüöÑ=\\bullettrain_side<tab>, ‚à´=\\int<tab>,           üîß=\\wrench<tab>\nùëÉ=\\itP<tab>,               ùê∑=\\itD<tab>,            ùëÄ =\\itM<tab>\n\n\n\n\n\n","category":"type"},{"location":"workflow/#IndividualDisplacements.Individuals-Tuple{NamedTuple}","page":"User Guide","title":"IndividualDisplacements.Individuals","text":"Individuals(NT::NamedTuple)\n\nConstructor that uses a NamedTuple with only plain text keywords (i.e. no-unicode needed).\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nI=(position=zeros(3,2),ID=1:2,record=deepcopy(df))\nI=Individuals(I)\n\n\n\n\n\n","category":"method"},{"location":"workflow/#Core-Functions","page":"User Guide","title":"Core Functions","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"‚à´!(ùêº,ùëá) displaces individuals ùêº continuously over time period ùëá according to velocity function üöÑ, temporal integration method / solver ‚à´, and post-processing workflow üîß (all embedded within ùêº).","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"‚à´!","category":"page"},{"location":"workflow/#IndividualDisplacements.‚à´!","page":"User Guide","title":"IndividualDisplacements.‚à´!","text":"‚à´!(ùêº::Individuals,ùëá::Tuple)\n\nDisplace simulated individuals continuously through space over time period ùëá starting from position üìå. \n\nThis is typically achieved by computing the cumulative integral of velocity experienced by each individual along its trajectory (‚à´ üöÑ dt).\nThe current default is solve(prob,Euler(),dt=day) but all solver options from the OrdinaryDiffEq.jl package are available.\nAfter this, ‚à´! is also equiped to postprocess results recorded into üî¥ via the üîß workflow, and the last step in ‚à´! consiste in updating üìå to be ready for continuing in a subsequent call to ‚à´!.\n\n\n\n\n\n","category":"function"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/particle_cloud.jl\"","category":"page"},{"location":"basics/particle_cloud/#Particle-Cloud","page":"Particle Cloud","title":"Particle Cloud","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"Using the same setup as detailed_look.jl or example2(), here we simulate a point cloud getting advected by the flow field. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/particle_cloud/#.-Import-Software","page":"Particle Cloud","title":"1. Import Software","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"using IndividualDisplacements, OrdinaryDiffEq, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"));\nnothing #hide","category":"page"},{"location":"basics/particle_cloud/#.-Setup-Problem","page":"Particle Cloud","title":"2. Setup Problem","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùëÉ,Œì=example2_setup()\n\nii1=5:5:40; ii2=5:5:25\nx=vec([x-0.5 for x in ii1, y in ii2])\ny=vec([y-0.5 for x in ii1, y in ii2])\nxy=transpose([x y])\n\nùëÉ.ùëá[:] = [0.0,2998*3600.0]\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-6,abstol=1e-6)\ntr = DataFrame([fill(Int, 1) ; fill(Float64, 3)], [:ID, :x, :y, :t])\n\nùêº = Individuals{Float64}(üìå=xy[:,:], üî¥=tr, üÜî=collect(1:size(xy,2)),\n                         üöÑ = dxy_dt, ‚à´ = solv, üîß = postprocess_xy, ùëÉ=ùëÉ);\nnothing #hide","category":"page"},{"location":"basics/particle_cloud/#.-Compute-Trajectories","page":"Particle Cloud","title":"3. Compute Trajectories","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"basics/particle_cloud/#.-Display-results","page":"Particle Cloud","title":"4. Display results","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùêº.üî¥.lon=5000*ùêº.üî¥.x\nùêº.üî¥.lat=5000*ùêº.üî¥.y\nplt=PlotBasic(ùêº.üî¥,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"Compare with trajectory output from MITgcm","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"#df=read_flt(IndividualDisplacements.flt_example,Float32)\n#ref=PlotBasic(df,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/random_flow_field.jl\"","category":"page"},{"location":"basics/random_flow_field/#Random-Flow","page":"Random Flow","title":"Random Flow","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"Simulate trajectories of a particle cloud in a randomly generated flow field. A doubly periodic domain is used and an animation generated. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"(Image: particles in random flow)","category":"page"},{"location":"basics/random_flow_field/#.1-Import-Software","page":"Random Flow","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"using OrdinaryDiffEq, IndividualDisplacements, MeshArrays\np=dirname(pathof(MeshArrays)); include(joinpath(p,\"../examples/Demos.jl\"))\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"));\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.2-Setup-Problem","page":"Random Flow","title":"1.2 Setup Problem","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"Put grid variables in a dictionary.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"np=8\nnq=12\nŒì=simple_periodic_domain(np,nq);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"Derive flow field from randomly generated œï streamfunction","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"ùëÉ,œï=setup_random_flow(Œì);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.3-Initial-Conditions","page":"Random Flow","title":"1.3 Initial Conditions","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"x0,x1=np .*(0.4,0.6)\ny0,y1=np .*(0.4,0.6)\n\nn=100\nx0=x0 .+(x1-x0).*rand(n)\ny0=y0 .+(y1-y0).*rand(n)\n\nxy=transpose([x0[:] y0[:] ones(size(x0[:]))]);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.1-Compute-Trajectories","page":"Random Flow","title":"2.1 Compute Trajectories","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"tr = DataFrame([fill(Int, 1) ; fill(Float64, 3)], [:ID, :x, :y, :t])\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-5)\nùêº = Individuals{Float64}(üìå=xy[:,:], üî¥=tr, üÜî=collect(1:size(xy,2)),\n                         üöÑ = dxy_dt!, ‚à´ = solv, üîß = postprocess_xy, ùëÉ=ùëÉ)\n\nùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"basics/random_flow_field/#.2-Plot-Results","page":"Random Flow","title":"2.2 Plot Results","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"For example, generate a simple animation (with if true):","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"if false\nanim = @animate for t in 0:2.0:maximum(ùêº.tr.t)\n   phi_and_subset(Œì,œï,ùêº.tr,t)\nend\npth=tempdir()*\"/\"\ngif(anim, pth*\"RandomFlow.gif\", fps = 15)\nend","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/detailed_look.jl\"","category":"page"},{"location":"basics/detailed_look/#Detailed-Look","page":"Detailed Look","title":"Detailed Look","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"A more detailed Look at spatial interpolation, integration through time, and I/O. For additional documentation e.g. see 1, 2, 3, 4. Here we illustrate a few things in more detail:","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"reading velocities from file.\ngridded velocity output (Udata, Vdata)\npre-computed trajectory output (float_traj*data)\ninterpolating U,V from gridded output to individual locations\ncompared with u,v from float_traj*data\ncomputing trajectories (location v time) using OrdinaryDiffEq.jl\ncompared with x(t),y(t) from float_traj*data","category":"page"},{"location":"basics/detailed_look/#.-Import-Software","page":"Detailed Look","title":"1. Import Software","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"using IndividualDisplacements, OrdinaryDiffEq, DataFrames, MITgcmTools\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"));\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Read-Trajectory-Output","page":"Detailed Look","title":"2. Read Trajectory Output","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"dirIn=IndividualDisplacements.flt_example\nprec=Float32\ndf=read_flt(dirIn,prec);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Read-Gridded-Variables","page":"Detailed Look","title":"3. Read Gridded Variables","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"using MeshArrays.jl and e.g. a NamedTyple","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"ùëÉ,Œì=example2_setup();\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Velocity-Fields","page":"Detailed Look","title":"4. Visualize Velocity Fields","text":"","category":"section"},{"location":"basics/detailed_look/#.-Visualize-Trajectories","page":"Detailed Look","title":"5. Visualize Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"(select one trajectory)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmp=df[df.ID .== 200, :]\ntmp[1:4,:]","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Super-impose trajectory over velocity field (first for u ...)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"x=Œì[\"XG\"].f[1][:,1]\ny=Œì[\"YC\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.u0[1,1]);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Super-impose trajectory over velocity field (... then for v)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"x=Œì[\"XC\"].f[1][:,1]\ny=Œì[\"YG\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.v0[1,1]);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Interpolate-Velocities","page":"Detailed Look","title":"6. Interpolate Velocities","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"uInit=[tmp[1,:lon];tmp[1,:lat]]./ùëÉ.dx\nnSteps=Int32(tmp[end,:time]/3600)-2\ndu=fill(0.0,2);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Visualize and compare with actual grid point values ‚Äì jumps on the tangential component are expected with linear scheme:","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpx=fill(0.0,100)\nfor i=1:100\n    tmpx[i]=500.0 *i./ùëÉ.dx\n    dxy_dt(du,[tmpx[i];0.499./ùëÉ.dx],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"And similarly in the other direction","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpy=fill(0.0,100)\nfor i=1:100\n    tmpy[i]=500.0 *i./ùëÉ.dx\n    dxy_dt(du,[0.499./ùëÉ.dx;tmpy[i]],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Compare recomputed velocities with those from pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"nSteps=2998\ntmpu=fill(0.0,nSteps); tmpv=fill(0.0,nSteps);\ntmpx=fill(0.0,nSteps); tmpy=fill(0.0,nSteps);\nrefu=fill(0.0,nSteps); refv=fill(0.0,nSteps);\nfor i=1:nSteps\n    dxy_dt_replay(du,[tmp[i,:lon],tmp[i,:lat]],tmp,tmp[i,:time])\n    refu[i]=du[1]./ùëÉ.dx\n    refv[i]=du[2]./ùëÉ.dx\n    dxy_dt(du,[tmp[i,:lon],tmp[i,:lat]]./ùëÉ.dx,ùëÉ,tmp[i,:time])\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/#.-Compute-Trajectories","page":"Detailed Look","title":"6. Compute Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Solve through time using OrdinaryDiffEq.jl with","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"dxy_dt is the function computing dxy/dt\nuInit is the initial condition u @ tspan[1]\ntspan is the time interval\nuvetc are parameters for dxy_dt\nTsit5 is the time-stepping scheme\nreltol and abstol are tolerance parameters","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tspan = (0.0,nSteps*3600.0)\n#prob = ODEProblem(dxy_dt_replay,uInit,tspan,tmp)\nprob = ODEProblem(dxy_dt,uInit,tspan,ùëÉ)\nsol = solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\nsol[1:4]","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Compare recomputed trajectories with originals from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"ref=transpose([tmp[1:nSteps,:lon] tmp[1:nSteps,:lat]])\nmaxLon=80*5.e3\nmaxLat=42*5.e3\nshow(size(ref))\nfor i=1:nSteps-1\n    ref[1,i+1]-ref[1,i]>maxLon/2 ? ref[1,i+1:end]-=fill(maxLon,(nSteps-i)) : nothing\n    ref[1,i+1]-ref[1,i]<-maxLon/2 ? ref[1,i+1:end]+=fill(maxLon,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]>maxLat/2 ? ref[2,i+1:end]-=fill(maxLat,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]<-maxLat/2 ? ref[2,i+1:end]+=fill(maxLat,(nSteps-i)) : nothing\nend\nref=ref./ùëÉ.dx;\nnothing #hide","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#IndividualDisplacements.jl","page":"Introduction","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Inter-operability with common climate model grids and their representation in MeshArrays.jl is a central element (docs). IndividualDisplacements.jl can also read and plot trajectories using MIT General Circulation Model output or Ocean Drifting Buoy data (movie). It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015, Forget, 2018).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: simulated particle movie (95m))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Global Drifter Program data)","category":"page"},{"location":"API/#Velocity-Interpolation","page":"Tool Box","title":"Velocity Interpolation","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"The dxy_dt, dxy_dt!, dxyz_dt, dxyz_dt!, etc functions compute the tracked individual velocity. ","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"dxy_dt\ndxy_dt!\ndxyz_dt\ndxyz_dt!\ndxy_dt_replay\ndxy_dt_CyclicArray","category":"page"},{"location":"API/#IndividualDisplacements.dxy_dt","page":"Tool Box","title":"IndividualDisplacements.dxy_dt","text":"dxy_dt(du,u,ùëÉ::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; NO halos) to position u (x,y) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/particle_cloud.jl\"))\nref=[29.381183342468674  19.890831699436823]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt!","page":"Tool Box","title":"IndividualDisplacements.dxy_dt!","text":"dxy_dt!(du,u,p::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; with halos) to position u (x,y,fIndex) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/random_flow_field.jl\"))\nref=[4. 6.]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref,atol=10.0))\n\n# output\n\ntrue\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/worldwide/global_ocean_circulation.jl\"))\nref=[78. 88.]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref,atol=10.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxyz_dt","page":"Tool Box","title":"IndividualDisplacements.dxyz_dt","text":"dxyz_dt(du,u,ùëÉ::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (3D; NO halos) to position u (x,y,z) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/solid_body_rotation.jl\"))\nref=[7.767441577479032 9.513402495574852 0.7065855989421701]\nprod(isapprox.(ùêº.üìå',ref))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxyz_dt!","page":"Tool Box","title":"IndividualDisplacements.dxyz_dt!","text":"dxyz_dt!(du,u,p::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (3D; with halos) to position u (x,y,z,fIndex) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/worldwide/three_dimensional_ocean.jl\"))\nref=[211. 34. -70.]\nprod(isapprox.([mean(ùêº.üî¥.lon) mean(ùêº.üî¥.lat) mean(ùêº.üî¥.z)],ref,atol=50.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt_replay","page":"Tool Box","title":"IndividualDisplacements.dxy_dt_replay","text":"dxy_dt_replay(du,u,p::DataFrame,t)\n\nInterpolate velocity from MITgcm float_trajectories output and return position increment du.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt_CyclicArray","page":"Tool Box","title":"IndividualDisplacements.dxy_dt_CyclicArray","text":"dxy_dt_CyclicArray(du,u,ùëÉ::NamedTuple,tim)\n\nNearest neighbor (?) velocity from gridded fields (2D; NO halos but not needed when CyclicArrays is used to extend valid indice ranges).\n\nnotes: spatial interpolation & temporal interpolation are lacking\n\n\n\n\n\n","category":"function"},{"location":"API/#Setup-And-Postprocessing","page":"Tool Box","title":"Setup And Postprocessing","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"Convenience functions to initialize a simulation and posprocess the output are provided. ","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"initialize_lonlat\nrandn_lonlat\npostprocess_lonlat\npostprocess_xy","category":"page"},{"location":"API/#IndividualDisplacements.initialize_lonlat","page":"Tool Box","title":"IndividualDisplacements.initialize_lonlat","text":"initialize_lonlat(Œì,lon,lat ; msk=missing)\n\nDefine initial condition (u0,du) in grid coordinates (Œì) from longitude & latitude vectors (lon,lat) optionally with a land mask (msk).\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.randn_lonlat","page":"Tool Box","title":"IndividualDisplacements.randn_lonlat","text":"randn_lonlat(nn=1,seed=missing)\n\nRandomly distributed longitude, latitude positions on the sphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_lonlat","page":"Tool Box","title":"IndividualDisplacements.postprocess_lonlat","text":"postprocess_lonlat(sol,ùëÉ::NamedTuple; id=missing, ùëá=missing)\n\nCopy sol to a DataFrame & map position to lon,lat coordinates using \"exchanged\" ùëÉ.XC, ùëÉ.YC via add_lonlat!\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_xy","page":"Tool Box","title":"IndividualDisplacements.postprocess_xy","text":"postprocess_xy()\n\nCopy sol to a DataFrame & map position to x,y coordinates, and define time axis for a simple doubly periodic domain\n\n\n\n\n\n","category":"function"},{"location":"API/#Read-Output-From-File","page":"Tool Box","title":"Read Output From File","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"Trajectory simulated by the MITgcm or observed by the global drifter program can be read from file using, respectively MITgcmTools.read_flt or  read_drifters.","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"read_drifters","category":"page"},{"location":"API/#IndividualDisplacements.read_drifters","page":"Tool Box","title":"IndividualDisplacements.read_drifters","text":"read_drifters(pth,lst;chnk=Inf,rng=(missing,missing))\n\nRead near-surface drifter data from the Global Drifter Program into a DataFrame.\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth,list=drifter_files()\ndf=read_drifters( pth*lst[end],chnk=1000,rng=(2014.1,2014.2) )\n#sort!(df, [:t, :lat])\n#CSV.write(pth*\"Drifter_hourly_2005_2019.csv\", df)\n\n\n\n\n\nread_drifters( pth, lst )\n\nRead near-surface hourly drifter data from the Global Drifter Program into a DataFrame.\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth,list=drifter_files()\ndf=read_drifters( pth, lst)\n\n\n\n\n\n","category":"function"}]
}
