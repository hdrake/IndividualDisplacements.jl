var documenterSearchIndex = {"docs":
[{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/worldwide/global_ocean_circulation.jl\"","category":"page"},{"location":"worldwide/global_ocean_circulation/#Global-Ocean-Simulation","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Particles moving with climatological monthly mean flow at selected depth level (e.g. k=10 for 95 m) based on an ocean state estimate (ECCO v4 r2 from https://ecco-group.org). For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Get-Software-and-Iput-Files","page":"Global Ocean Simulation","title":"1. Get Software & Iput Files","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"packages + helper functions\ngrid and velocity files","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"using IndividualDisplacements, MeshArrays, OrdinaryDiffEq\nusing Statistics, DataFrames, MITgcmTools, OceanStateEstimation\n\ninclude(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/helper_functions.jl\"))\nget_grid_if_needed(); get_velocity_if_needed();\nnothing #hide","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Set-Up-Parameters-and-Inputs","page":"Global Ocean Simulation","title":"2. Set Up Parameters & Inputs","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"select vertical level & duration in years\nread grid variables & velocities\nnormalize velocities","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"ùëÉ=setup_global_ocean(k=1,ny=2);\n\nkeys(ùëÉ)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Main-Computation-Loop","page":"Global Ocean Simulation","title":"3. Main Computation Loop","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/#.1-Initialize-Individuals-and-Solution","page":"Global Ocean Simulation","title":"3.1 Initialize Individuals & Solution","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"initial particle positions randomly over Global Ocean","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"xy=init_global_randn(10000,ùëÉ); id=collect(1:size(xy,2))\nùêº = Individuals{Float64}(xy=xy, id=id, ùëÉ=ùëÉ)\n\nfieldnames(typeof(ùêº))","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"initial integration from time 0 to 0.5 month","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"start!(ùêº)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.2-Iteration-function-example","page":"Global Ocean Simulation","title":"3.2 Iteration function example","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"reset!(ùêº) randomly selects a fraction (defined in setup_global_ocean()) of the particles and resets their positions before each integration period. This can maintain homogeneous coverage of the Global Ocean by particles.\ndisplace!(ùêº) then solves for the individual trajectories over one month, after updating velocity fields (ùêº.u0 etc) if needed, and adds diagnostics to the DataFrame used to record / trace variables along the trajectory (ùêº.tr).","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"function step!(ùêº::Individuals)\n    reset!(ùêº)\n    displace!(ùêº)\nend","category":"page"},{"location":"worldwide/global_ocean_circulation/#.3-Iterate-For-ny*12-Months","page":"Global Ocean Simulation","title":"3.3 Iterate For ny*12 Months","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"[step!(ùêº) for y=1:2, m=1:12]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.4-Compute-summary-statistics","page":"Global Ocean Simulation","title":"3.4 Compute summary statistics","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"gdf = groupby(ùêº.tr, :ID)\nshow(combine(gdf,nrow,:lat => mean))","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Plot-trajectories-/-individual-positions","page":"Global Ocean Simulation","title":"4. Plot trajectories / individual positions","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"using Plots\np=plot(;xlims=(-180,180),ylims=(-90,90),legend=:none)\np!(x,y)=scatter!(p,x,y,markersize=1.1,markerstrokewidth=0)\n[p!(gdf[i].lon,gdf[i].lat) for i in rand(collect(1:length(gdf)),10)]\ndisplay(p)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Or select a background map (e.g. lon, lat, and DL=log10(bottom depth)) and a recipe to superimpose initial and final locations. Try:","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"include(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/recipes_plots.jl\"))\na_plot(ùêº)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/solid_body_rotation.jl\"","category":"page"},{"location":"basics/solid_body_rotation/#Single-Particle-Simulation","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Simulate the trajectory of a particle in a perfectly circular flow (i.e. solid body rotation), which may represent e.g. an ocean meso-scale eddy. _Addendum: _ a homogeneous sinking / floating term was later added.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"(Image: solid body rotation)","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"As an exercise left to the user, directions are provided e.g. to add a convergence / divergence term. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"setup the software and initialize example\nsimulate trajectories & plot results\nexperiment with parameters (user)","category":"page"},{"location":"basics/solid_body_rotation/#.1-Import-Software","page":"Single Particle Simulation","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"using OrdinaryDiffEq, Plots, DataFrames\nusing IndividualDisplacements, MeshArrays","category":"page"},{"location":"basics/solid_body_rotation/#.2-Gridded-Domain","page":"Single Particle Simulation","title":"1.2  Gridded Domain","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"np,nz=16,4 #horizontal and vertical domain size\nŒì=simple_periodic_domain(np)\nŒ≥=Œì[\"XC\"].grid;\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.3-Velocity-Fields","page":"Single Particle Simulation","title":"1.3 Velocity Fields","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"#Solid-body rotation around central location ...\ni=Int(np/2+1)\nu=-(Œì[\"YG\"].-Œì[\"YG\"][1][i,i])\nv=(Œì[\"XG\"].-Œì[\"XG\"][1][i,i])\n\n#... plus a convergent term to / from central location\nd=-0.01\nu=u+d*(Œì[\"XG\"].-Œì[\"XG\"][1][i,i])\nv=v+d*(Œì[\"YG\"].-Œì[\"YG\"][1][i,i])\n\n#Replicate u,v in vertical dimension\nuu=MeshArray(Œ≥,Œ≥.ioPrec,nz)\n[uu[k]=u[1] for k=1:nz]\nvv=MeshArray(Œ≥,Œ≥.ioPrec,nz)\n[vv[k]=v[1] for k=1:nz]\n\n#Vertical velocity component w\nw=fill(1.0,MeshArray(Œ≥,Œ≥.ioPrec,nz))\n\n#store parameters in a NamedTuple\nùëÉ=(u0=uu, u1=uu, v0=vv, v1=vv,w0=0.0*w, w1=-0.01*w, ùëá=[0,19.95*2*pi], ioSize=(np,np,nz));\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.4-Initial-Position","page":"Single Particle Simulation","title":"1.4 Initial Position","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"xy=[np*1/3,np*1/3,nz*1/3]","category":"page"},{"location":"basics/solid_body_rotation/#.1-Solve-For-Particle-Trajectory","page":"Single Particle Simulation","title":"2.1 Solve For Particle Trajectory","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"tr = DataFrame( ID=[], x=[], y=[], z=[], t = [])\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-8)\nfunction postproc(sol,ùëÉ::NamedTuple,id=missing)\n    df=postprocess_xy(sol,ùëÉ,id)\n    #add third coordinate\n    z=sol[3,:,:]\n    df.z=z[:]\n    return df\n end\n\nùêº = Individuals{Float64}(xy=xy[:,:], ùëÉ=ùëÉ, ‚éî! = dxyz_dt, ‚ñ° = solv, ‚ñΩ = postproc, tr = tr)\nstart!(ùêº)","category":"page"},{"location":"basics/solid_body_rotation/#.2-Visualize-Particle-Trajectory","page":"Single Particle Simulation","title":"2.2 Visualize Particle Trajectory","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"define myplot convenience function\ngenerate animation using myplot\nsingle plot example using myplot","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"x,y,z=ùêº.tr.x,ùêº.tr.y,ùêº.tr.z\n\nmyplot(i)=plot(x[1:i],y[1:i],z[1:i],linewidth=2,arrow = 2,\n    title=\"Solid body rotation / Spiral example\",leg=false,\n    xaxis=\"x\",yaxis=\"y\",zaxis=\"z\",xlims=(0,np),ylims=(0,np))","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Animation example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"nt=length(x)\np=Int(ceil(nt/100))\nanim = @animate for i ‚àà 1:p:nt\n    myplot(i)\nend\npth=tempdir()*\"/\"\ngif(anim, pth*\"SolidBodyRotation.gif\", fps = 15)","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Single plot example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"plt=myplot(nt)\nscatter!(plt,[xy[1]],[xy[2]],[xy[3]])\nscatter!(plt,[x[end]],[y[end]],[z[end]])","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#random_flow_field.jl","page":"List Of Examples","title":"random_flow_field.jl","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"A random flow field is generated on a doubly periodic grid, and used to advect a cloud of points. This illustrates ‚¨°! and update_locations.jl to compute many trajectories at once.","category":"page"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"(Image: RandomFlow)","category":"page"},{"location":"examples/#global_ocean_circulation.jl","page":"List Of Examples","title":"global_ocean_circulation.jl","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"A real ocean simulation:","category":"page"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"examples/#solid_body_rotation.jl","page":"List Of Examples","title":"solid_body_rotation.jl","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"A very simple solid-body-rotation example which is used for unit testing (via test/runtests.jl):","category":"page"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"(Image: SolidBodyRotation)","category":"page"},{"location":"examples/#detailed_look.jl,-particle_cloud.jl","page":"List Of Examples","title":"detailed_look.jl, particle_cloud.jl","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"Two examples which use ‚¨° and reproduce trajectories computed by a different (fortran) tool. detailed_look.jl illustrates package features in more detail. particle_cloud.jl illustrates a computation of many trajectories at once.","category":"page"},{"location":"examples/#Plotting-recipes","page":"List Of Examples","title":"Plotting recipes","text":"","category":"section"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"Using three popular plotting packages:","category":"page"},{"location":"examples/","page":"List Of Examples","title":"List Of Examples","text":"examples/recipes_plots.jl\nexamples/recipes_makie.jl\nexamples/recipes_pyplot.jl\t","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/particle_cloud.jl\"","category":"page"},{"location":"basics/particle_cloud/#Particle-Cloud-Simulation","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"Using the same setup as detailed_look.jl or example2(), here we simulate a point cloud getting advected by the flow field. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/particle_cloud/#.-Import-Software","page":"Particle Cloud Simulation","title":"1. Import Software","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"using IndividualDisplacements, OrdinaryDiffEq, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))","category":"page"},{"location":"basics/particle_cloud/#.-Setup-Problem","page":"Particle Cloud Simulation","title":"2. Setup Problem","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"ùëÉ,Œì=example2_setup()\n\nii1=5:5:40; ii2=5:5:25\nx=vec([x-0.5 for x in ii1, y in ii2])\ny=vec([y-0.5 for x in ii1, y in ii2])\nxy=transpose([x y])\n\nùëÉ.ùëá[:] = [0.0,2998*3600.0]\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-6,abstol=1e-6)\ntr = DataFrame( ID=[], x=[], y=[], t = [])\n\nùêº = Individuals{Float64}(xy=xy[:,:], ùëÉ=ùëÉ, ‚éî! = ‚¨°, ‚ñ° = solv, ‚ñΩ = postprocess_xy, tr = tr)","category":"page"},{"location":"basics/particle_cloud/#.-Compute-Trajectories","page":"Particle Cloud Simulation","title":"3. Compute Trajectories","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"start!(ùêº)","category":"page"},{"location":"basics/particle_cloud/#.-Display-results","page":"Particle Cloud Simulation","title":"4. Display results","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"ùêº.tr.lon=5000*ùêº.tr.x\nùêº.tr.lat=5000*ùêº.tr.y\nplt=PlotBasic(ùêº.tr,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"Compare with trajectory output from MITgcm","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"#df=read_flt(joinpath(p,\"../examples/flt_example/\"),Float32)\n#ref=PlotBasic(df,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/random_flow_field.jl\"","category":"page"},{"location":"basics/random_flow_field/#Random-Flow-Simulation","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Simulate trajectories of a particle cloud in a randomly generated flow field. A doubly periodic domain is used and an animation generated. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"(Image: particles in random flow)","category":"page"},{"location":"basics/random_flow_field/#.1-Import-Software","page":"Random Flow Simulation","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"using OrdinaryDiffEq, IndividualDisplacements, MeshArrays\np=dirname(pathof(MeshArrays)); include(joinpath(p,\"../examples/Demos.jl\"))\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))","category":"page"},{"location":"basics/random_flow_field/#.2-Setup-Problem","page":"Random Flow Simulation","title":"1.2 Setup Problem","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Put grid variables in a dictionary.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"np=8\nnq=12\nŒì=simple_periodic_domain(np,nq);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Derive flow field from randomly generated œï streamfunction","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"ùëÉ,œï=setup_random_flow(Œì);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.3-Initial-Conditions","page":"Random Flow Simulation","title":"1.3 Initial Conditions","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"x0,x1=np .*(0.4,0.6)\ny0,y1=np .*(0.4,0.6)\n\nn=100\nx0=x0 .+(x1-x0).*rand(n)\ny0=y0 .+(y1-y0).*rand(n)\n\nxy=transpose([x0[:] y0[:] ones(size(x0[:]))]);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.1-Compute-Trajectories","page":"Random Flow Simulation","title":"2.1 Compute Trajectories","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"tr = DataFrame( ID=[], x=[], y=[], t = [])\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-5)\nùêº = Individuals{Float64}(xy=xy[:,:], ùëÉ=ùëÉ, ‚éî! = ‚¨°!, ‚ñ° = solv, ‚ñΩ = postprocess_xy, tr =tr)\n\nstart!(ùêº)","category":"page"},{"location":"basics/random_flow_field/#.2-Plot-Results","page":"Random Flow Simulation","title":"2.2 Plot Results","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"For example, generate a simple animation (with if true):","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"if false\nanim = @animate for t in 0:2.0:maximum(ùêº.tr.t)\n   phi_and_subset(Œì,œï,ùêº.tr,t)\nend\npth=tempdir()*\"/\"\ngif(anim, pth*\"RandomFlow.gif\", fps = 15)\nend","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/detailed_look.jl\"","category":"page"},{"location":"basics/detailed_look/#A-Detailed-Look","page":"A Detailed Look","title":"A Detailed Look","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"A Detailed Look at spatial interpolation, integration through time, and I/O. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Here we illustrate:","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"reading velocities from file.\ngridded velocity output (Udata, Vdata)\npre-computed trajectory output (float_traj*data)\ninterpolating U,V from gridded output to individual locations\ncompared with u,v from float_traj*data\ncomputing trajectories (location v time) using OrdinaryDiffEq.jl\ncompared with x(t),y(t) from float_traj*data","category":"page"},{"location":"basics/detailed_look/#.-Import-Software","page":"A Detailed Look","title":"1. Import Software","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"using IndividualDisplacements, OrdinaryDiffEq, DataFrames, MITgcmTools\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"));\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Read-Trajectory-Output","page":"A Detailed Look","title":"2. Read Trajectory Output","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"get_flt_ex_if_needed()\ndirIn=joinpath(p,\"../examples/flt_example/\")\nprec=Float32\ndf=read_flt(dirIn,prec) #function exported by IndividualDisplacements\nplt=PlotBasic(df,300,100000.0)","category":"page"},{"location":"basics/detailed_look/#.-Read-Gridded-Variables","page":"A Detailed Look","title":"3. Read Gridded Variables","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"using MeshArrays.jl and e.g. a NamedTyple","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"ùëÉ,Œì=example2_setup();\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Velocity-Fields","page":"A Detailed Look","title":"4. Visualize Velocity Fields","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"plt=heatmap(Œì[\"mskW\"][1,1].*ùëÉ.u0[1,1],title=\"U at the start\")\n\nplt=heatmap(Œì[\"mskW\"][1,1].*ùëÉ.u1[1,1]-ùëÉ.u0[1,1],title=\"U end - U start\")","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Trajectories","page":"A Detailed Look","title":"5. Visualize Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"(select one trajectory)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmp=df[df.ID .== 200, :]\ntmp[1:4,:]","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Super-impose trajectory over velocity field (first for u ...)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"x=Œì[\"XG\"].f[1][:,1]\ny=Œì[\"YC\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.u0[1,1])\nplt=contourf(x,y,z,c=:delta)\nplot!(tmp[:,:lon],tmp[:,:lat],c=:red,w=4,leg=false)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Super-impose trajectory over velocity field (... then for v)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"x=Œì[\"XC\"].f[1][:,1]\ny=Œì[\"YG\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.v0[1,1])\nplt=contourf(x,y,z,c=:delta)\nplot!(tmp[:,:lon],tmp[:,:lat],c=:red,w=4,leg=false)","category":"page"},{"location":"basics/detailed_look/#.-Interpolate-Velocities","page":"A Detailed Look","title":"6. Interpolate Velocities","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"uInit=[tmp[1,:lon];tmp[1,:lat]]./ùëÉ.dx\nnSteps=Int32(tmp[end,:time]/3600)-2\ndu=fill(0.0,2);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Visualize and compare with actual grid point values ‚Äì jumps on the tangential component are expected with linear scheme:","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpx=fill(0.0,100)\nfor i=1:100\n    tmpx[i]=500.0 *i./ùëÉ.dx\n    ‚¨°(du,[tmpx[i];0.499./ùëÉ.dx],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend\nplt=plot(tmpx,tmpu,label=\"u (interp)\")\nplot!(Œì[\"XG\"].f[1][1:10,1]./ùëÉ.dx,ùëÉ.u0.f[1][1:10,1],marker=:o,label=\"u (C-grid)\")\nplot!(tmpx,tmpv,label=\"v (interp)\")\nplot!(Œì[\"XG\"].f[1][1:10,1]./ùëÉ.dx,ùëÉ.v0.f[1][1:10,1],marker=:o,label=\"v (C-grid)\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"And similarly in the other direction","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpy=fill(0.0,100)\nfor i=1:100\n    tmpy[i]=500.0 *i./ùëÉ.dx\n    ‚¨°(du,[0.499./ùëÉ.dx;tmpy[i]],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend\nplt=plot(tmpx,tmpu,label=\"u (interp)\")\nplot!(Œì[\"YG\"].f[1][1,1:10]./ùëÉ.dx,ùëÉ.u0.f[1][1,1:10],marker=:o,label=\"u (C-grid)\")\nplot!(tmpx,tmpv,label=\"v (interp)\")\nplot!(Œì[\"YG\"].f[1][1,1:10]./ùëÉ.dx,ùëÉ.v0.f[1][1,1:10],marker=:o,label=\"v (C-grid)\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Compare recomputed velocities with those from pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"nSteps=2998\ntmpu=fill(0.0,nSteps); tmpv=fill(0.0,nSteps);\ntmpx=fill(0.0,nSteps); tmpy=fill(0.0,nSteps);\nrefu=fill(0.0,nSteps); refv=fill(0.0,nSteps);\nfor i=1:nSteps\n    dxy_dt_replay(du,[tmp[i,:lon],tmp[i,:lat]],tmp,tmp[i,:time])\n    refu[i]=du[1]./ùëÉ.dx\n    refv[i]=du[2]./ùëÉ.dx\n    ‚¨°(du,[tmp[i,:lon],tmp[i,:lat]]./ùëÉ.dx,ùëÉ,tmp[i,:time])\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"plt=plot(tmpu,label=\"u\")\nplot!(tmpv,label=\"v\")\nplot!(refu,label=\"u (ref)\")\nplot!(refv,label=\"v (ref)\")","category":"page"},{"location":"basics/detailed_look/#.-Compute-Trajectories","page":"A Detailed Look","title":"6. Compute Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Solve through time using OrdinaryDiffEq.jl with","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"‚¨° is the function computing du/dt\nuInit is the initial condition u @ tspan[1]\ntspan is the time interval\nuvetc are parameters for ‚¨°\nTsit5 is the time-stepping scheme\nreltol and abstol are tolerance parameters","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tspan = (0.0,nSteps*3600.0)\n#prob = ODEProblem(dxy_dt_replay,uInit,tspan,tmp)\nprob = ODEProblem(‚¨°,uInit,tspan,ùëÉ)\nsol = solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\nsol[1:4]","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Compare recomputed trajectories with originals from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"ref=transpose([tmp[1:nSteps,:lon] tmp[1:nSteps,:lat]])\nmaxLon=80*5.e3\nmaxLat=42*5.e3\nshow(size(ref))\nfor i=1:nSteps-1\n    ref[1,i+1]-ref[1,i]>maxLon/2 ? ref[1,i+1:end]-=fill(maxLon,(nSteps-i)) : nothing\n    ref[1,i+1]-ref[1,i]<-maxLon/2 ? ref[1,i+1:end]+=fill(maxLon,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]>maxLat/2 ? ref[2,i+1:end]-=fill(maxLat,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]<-maxLat/2 ? ref[2,i+1:end]+=fill(maxLat,(nSteps-i)) : nothing\nend\nref=ref./ùëÉ.dx\n\nplt=plot(sol[1,:],sol[2,:],linewidth=5,title=\"Using Recomputed Velocities\",\n     xaxis=\"lon\",yaxis=\"lat\",label=\"Julia Solution\") # legend=false\nplot!(ref[1,:],ref[2,:],lw=3,ls=:dash,label=\"MITgcm Solution\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#IndividualDisplacements.jl","page":"Home","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inter-operability with common climate model grids and their representation in MeshArrays.jl is a central element. The package can also read and plot trajectory simulation output from e.g. the MITgcm. It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015).","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: simulated particle movie (300m))","category":"page"},{"location":"API/#API-Guide","page":"API Guide","title":"API Guide","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"See examples/worldwide/global_ocean_circulation.jl for an example:","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"start!\ndisplace!\nreset!","category":"page"},{"location":"API/#IndividualDisplacements.start!","page":"API Guide","title":"IndividualDisplacements.start!","text":"start!(ùêº::Individuals)\n\nSet up ODE problem over (0.0,ùêº.ùëÉ.ùëá[2]), solve, postprocess, & update ùêº.xy[:,:]\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.displace!","page":"API Guide","title":"IndividualDisplacements.displace!","text":"displace!(ùêº::Individuals)\n\nUpdate ùêº.ùëÉ, set up ODE problem over ùêº.ùëÉ.ùëá, solve, postprocess, & update ùêº.xy[:,:]\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.reset!","page":"API Guide","title":"IndividualDisplacements.reset!","text":"reset!(ùêº::Individuals)\n\nRandomly select a fraction (ùêº.ùëÉ.frac) of the particles and reset their positions.\n\n\n\n\n\n","category":"function"},{"location":"API/#Data-Structures","page":"API Guide","title":"Data Structures","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"The main data type used is Individuals which contains arrays and a dataframe to store the output diagnostics.","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Modules = [IndividualDisplacements]\nOrder   = [:type]","category":"page"},{"location":"API/#IndividualDisplacements.Individuals","page":"API Guide","title":"IndividualDisplacements.Individuals","text":"struct Individuals{T}\n\nContains: xy, id, tr, etc\n\ni=Individuals{Float32}(xy=zeros(3,2),id=1:2)\n\n\n\n\n\n","category":"type"},{"location":"API/#Velocity-Interpolation","page":"API Guide","title":"Velocity Interpolation","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"The ‚¨° and ‚¨°! functions compute the tracked point / individual / agent velocities. ","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"‚¨°!\n‚¨°","category":"page"},{"location":"API/#IndividualDisplacements.‚¨°!","page":"API Guide","title":"IndividualDisplacements.‚¨°!","text":"dxy_dt!(du,u,p::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; with halos) to position u (x,y,fIndex) to compute the derivative of position v time  du_dt.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.‚¨°","page":"API Guide","title":"IndividualDisplacements.‚¨°","text":"dxy_dt(du,u,ùëÉ::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; NO halos) to position u (x,y) to compute the derivative of position v time  du_dt.\n\n\n\n\n\n","category":"function"},{"location":"API/#Setup-And-Postprocessing","page":"API Guide","title":"Setup And Postprocessing","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Convenience functions to initialize a simulation and posprocess the output are provided. ","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"initialize_lonlat\nrandn_lonlat\npostprocess_lonlat\npostprocess_xy","category":"page"},{"location":"API/#IndividualDisplacements.initialize_lonlat","page":"API Guide","title":"IndividualDisplacements.initialize_lonlat","text":"initialize_lonlat(Œì,lon,lat ; msk=missing)\n\nDefine initial condition (u0,du) in grid coordinates (Œì) from longitude & latitude vectors (lon,lat) optionally with a land mask (msk).\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.randn_lonlat","page":"API Guide","title":"IndividualDisplacements.randn_lonlat","text":"randn_lonlat(nn=1,seed=missing)\n\nRandomly distributed longitude, latitude positions on the sphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_lonlat","page":"API Guide","title":"IndividualDisplacements.postprocess_lonlat","text":"postprocess_lonlat(sol,ùëÉ::NamedTuple)\n\nCopy sol to a DataFrame & map position to lon,lat coordinates using \"exchanged\" ùëÉ.XC, ùëÉ.YC via add_lonlat!\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_xy","page":"API Guide","title":"IndividualDisplacements.postprocess_xy","text":"postprocess_xy()\n\nCopy sol to a DataFrame & map position to x,y coordinates, and define time axis for a simple doubly periodic domain\n\n\n\n\n\n","category":"function"},{"location":"API/#Read-Output-From-File","page":"API Guide","title":"Read Output From File","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Trajectory simulated by the MITgcm or observed by the global drifter program can be read from file using, respectively MITgcmTools.read_flt or  read_drifters.","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"read_drifters","category":"page"},{"location":"API/#IndividualDisplacements.read_drifters","page":"API Guide","title":"IndividualDisplacements.read_drifters","text":"read_drifters(pth,lst;chnk=Inf,rng=(missing,missing))\n\nRead near-surface drifter data (https://doi.org/10.1002/2016JC011716) from the Global Drifter Program (https://doi.org/10.25921/7ntx-z961) into a DataFrame\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth=\"Drifter_hourly_v013/\"\nlst=[\"driftertrajGPS_1.03.nc\",\"driftertrajWMLE_1.02_block1.nc\",\"driftertrajWMLE_1.02_block2.nc\",\n   \"driftertrajWMLE_1.02_block3.nc\",\"driftertrajWMLE_1.02_block4.nc\",\"driftertrajWMLE_1.02_block5.nc\",\n   \"driftertrajWMLE_1.02_block6.nc\",\"driftertrajWMLE_1.03_block7.nc\"]\n\n#df=read_drifters( pth*lst[end],chnk=1000,rng=(2014.1,2014.2) )\n\ndf = DataFrame(lon=[], lat=[], t=[], ID=[])\nfor fil in lst\n   println(fil)\n   append!(df,read_drifters( pth*fil,chnk=10000,rng=(2005.0,2020.0) ))\n   println(size(df))\nend\n\n#sort!(df, [:t, :lat])\n#CSV.write(pth*\"Drifter_hourly_2005_2019.csv\", df)\n#unID=unique(df[!,:ID])\n\n\n\n\n\n","category":"function"}]
}
