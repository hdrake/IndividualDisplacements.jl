var documenterSearchIndex = {"docs":
[{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/worldwide/global_ocean_circulation.jl\"","category":"page"},{"location":"worldwide/global_ocean_circulation/#Global-Ocean-Simulation","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Particles moving with climatological monthly mean flow at selected depth level (e.g. k=10 for 95 m) based on an ocean state estimate (ECCO v4 r2 from https://ecco-group.org). For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-import-software","page":"Global Ocean Simulation","title":"1. import software","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"using IndividualDisplacements, MeshArrays, OrdinaryDiffEq\nusing Statistics, MITgcmTools, DataFrames\n\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\nget_grid_if_needed()","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Read-gridded-variables-as-MeshArrays","page":"Global Ocean Simulation","title":"2. Read gridded variables as MeshArrays","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"k=10 #choice of vertical level\nny=10 #number of simulated years (20 for k>20)\nr_reset = 0.01 #fraction of the particles reset per month (0.05 for k<=10)\n\n#read grid and set up connections between subdomains\nγ=GridSpec(\"LatLonCap\",joinpath(p,\"../examples/GRID_LLC90/\"))\nΓ=GridLoad(γ)\nΓ=merge(Γ,IndividualDisplacements.NeighborTileIndices_cs(Γ))\n\n#initialize u0,u1 etc\nuvetc=read_uvetc(k,0.0,Γ,joinpath(p,\"../examples/nctiles_climatology/\"));\nnothing #hide","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Sample-velocity-and-trajectory-computations","page":"Global Ocean Simulation","title":"3. Sample velocity & trajectory computations","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"#initial condition\nuInit=[45.0,100.0,1.0]\ndu=fill(0.0,3);\n\n#velocity computation over neighbor sample\nii=uInit[1]-3:0.1:uInit[1]+3\njj=uInit[2]-3:0.1:uInit[2]+3\nff=ones(size(jj))\n\ns=size(ii)\n(u,v,f)=[zeros(s),zeros(s),zeros(s)]\nfor i in eachindex(ii)\n    ⬡!(du,[ii[i];jj[i];ff[i]],uvetc,0.0)\n    u[i],v[i],f[i]=du\nend\n\n#using plots\n#plt=plot(u)\n#plot!(v)\n#display(plt)\n\n#Solve for single trajectory (uInit)\n𝑇 = (0.0,uvetc[\"t1\"])\nprob = ODEProblem(⬡!,uInit,𝑇,uvetc)\nsol_one = solve(prob,Tsit5(),reltol=1e-4,abstol=1e-4)\nsol_two = solve(prob,Euler(),dt=1e6)\nsize(sol_one)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Main-Computation-Loop","page":"Global Ocean Simulation","title":"3. Main Computation Loop","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"initial particle positions randomly over Global Ocean\ninitial integration from time 0 to 0.5 month\nupdate velocity fields & repeat for n years","category":"page"},{"location":"worldwide/global_ocean_circulation/#.1-Initialization-and-Initial-Solution","page":"Global Ocean Simulation","title":"3.1 Initialization & Initial Solution","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"#(u0,du)=initialize_gridded(uvetc,10)\n\n#(lon, lat) = randn_lonlat(20000)\n#(u0,du)=initialize_lonlat(Γ,lon,lat; msk=Γ[\"hFacC\"][:,k])","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Or","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"lo0,lo1=(-160.0,-150.0)\nla0,la1=(35.0,45.0)\nn=100\nlon=lo0 .+(lo1-lo0).*rand(n)\nlat=la0 .+(la1-la0).*rand(n)\n(u0,du)=initialize_lonlat(Γ,lon,lat; msk=Γ[\"hFacC\"][:,k]);\n\n\nu0_store = deepcopy(u0)\nn_store = size(u0_store,2)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Fraction of the particles reset per month","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"#r_reset = 0.05\nn_reset = Int(round(r_reset*n_store))\n#k_reset = rand(1:size(u0_store,2), n_reset)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Solve for all trajectories for first 1/2 month","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"prob = ODEProblem(⬡!,u0,𝑇,uvetc)\nsol = solve(prob,Euler(),dt=uvetc[\"dt\"]/8.0)\nsize(sol)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Map i,j to lon,lat coordinates and convert to DataFrame","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"df=postprocess_lonlat(sol,uvetc)\ndf[1:4,:]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.2-Repeat-ny-Years-x-12-Months","page":"Global Ocean Simulation","title":"3.2 Repeat ny Years x 12 Months","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"A fraction of the particles, randomly selected, is reset every month to maintain a relatively homogeneous coverage of the Global Ocean by the fleet of particles.","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"t0=[uvetc[\"t1\"]]\nu0 = deepcopy(sol[:,:,end])\nprintln(size(df))\nfor y=1:ny\n    for m=1:12\n        uvetc=read_uvetc(k,t0[1],Γ,joinpath(p,\"../examples/nctiles_climatology/\"))\n        𝑇 = (uvetc[\"t0\"],uvetc[\"t1\"])\n        prob = ODEProblem(⬡!,u0,𝑇,uvetc)\n        sol = solve(prob,Euler(),dt=uvetc[\"dt\"]/8.0)\n        tmp = postprocess_lonlat(sol[:,:,2:end],uvetc)\n\n        k_reset = rand(1:size(u0_store,2), n_reset)\n        k_new = rand(1:size(u0_store,2), n_reset)\n        t_reset = Int(size(tmp,1)/n_store)-1\n\n        tmp[k_reset.+t_reset*n_store,2:end].=NaN #reset a random subset of particles\n        append!(df,tmp)\n\n        t0[1]=uvetc[\"t1\"]\n        u0[:,:] = deepcopy(sol[:,:,end])\n        u0[:,k_reset].=deepcopy(u0_store[:,k_new]) #reset a random subset of particles\n    end\n    println(size(df))\nend","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Plot-trajectories","page":"Global Ocean Simulation","title":"4. Plot trajectories","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Try PlotBasic, PlotMapProj, or PlotMakie","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"#p=dirname(pathof(IndividualDisplacements))\n#nn=1000\n\n#include(joinpath(p,\"../examples/recipes_plots.jl\"))\n#plt=PlotBasic(df,nn,180.)\n\n#include(joinpath(p,\"../examples/recipes_pyplot.jl\"))\n#PyPlot.figure(); PlotMapProj(df,nn)\n\n#include(joinpath(p,\"../examples/recipes_makie.jl\"))\n#AbstractPlotting.inline!(true) #for Juno, set to false\n#scene=PlotMakie(df,nn,180.0)\n##Makie.save(\"LatLonCap300mDepth.png\", scene)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Or first create lon, lat, and DL to use in plot background:","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"nf=size(u0,2)\nnt=size(df,1)/nf\nt=[ceil(i/nf)-1 for i in 1:nt*nf]\ndf[!,:t]=2000 .+ uvetc[\"dt\"]/4/86400/365 * t\n\nlon=[i for i=-179.5:1.0:179.5, j=-89.5:1.0:89.5]\nlat=[j for i=-179.5:1.0:179.5, j=-89.5:1.0:89.5]\n(f,i,j,w,_,_,_)=InterpolationFactors(Γ,vec(lon),vec(lat))\n\nDL=log10.(Interpolate(Γ[\"Depth\"],f,i,j,w))\nDL[findall((!isfinite).(DL))].=NaN\nDL=reshape(DL,size(lon));\nnothing #hide","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Generate plot or movie using GeoMakie.jl (if true)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"if false\n    using ArgoData\n    p = include(joinpath(dirname(pathof(ArgoData)),\"movies.jl\"));\n    tt=collect(2000:0.05:2000+ny)\n    scene = ProjMap(DL,colorrange=(2.,4.))\n    ProjScatterMovie(scene,df,tt,\"GlobalDomain_fleet_k\"*\"$k\"*\"_v1.mp4\",dt=1.0,mrksz=5e3)\nend","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"Generate plot or movie using Plots.jl","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"contourf(lon[:,1],lat[1,:],transpose(DL),clims=(1.5,5),c = :ice, colorbar=false)\n\ndt=0.0001\nt0=minimum(df[!,:t])\nt1=maximum(df[!,:t])\n#t=2001.0\n\nt=t1\ndf_t = df[ (df.t.>t-dt).&(df.t.<=t) , :]\nscatter!(df_t.lon,df_t.lat,markersize=3.0,c=:red,leg=:none,\n    xlims=(-180.0,180.0),ylims=(-90.0,90.0),marker = (:circle, stroke(0)))\n\nt=t0\ndf_t = df[ (df.t.>t-dt).&(df.t.<=t) , :]\nscatter!(df_t.lon,df_t.lat,markersize=3.0,c=:yellow,leg=:none,\n    xlims=(-180.0,180.0),ylims=(-90.0,90.0),marker = (:dot, stroke(0)))","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Ocean Simulation","title":"Global Ocean Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/solid_body_rotation.jl\"","category":"page"},{"location":"basics/solid_body_rotation/#Single-Particle-Simulation","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Simulate the trajectory of a particle in a perfectly circular flow (i.e. solid body rotation), which may represent e.g. an ocean meso-scale eddy.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"<img src=\"https://github.com/JuliaClimate/IndividualDisplacements.jl/raw/master/examples/figs/SolidBodyRotation.gif\" width=\"60%\">","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"As an exercise left to the user, directions are provided e.g. to add a convergence / divergence term. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"setup the software and initialize example\nsimulate trajectories & plot results\nexperiment with parameters (user)","category":"page"},{"location":"basics/solid_body_rotation/#.1-Import-Software","page":"Single Particle Simulation","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"using OrdinaryDiffEq, Plots\nusing IndividualDisplacements, MeshArrays","category":"page"},{"location":"basics/solid_body_rotation/#.2-Gridded-Domain","page":"Single Particle Simulation","title":"1.2  Gridded Domain","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"define SetPeriodicDomain function, which uses MeshArrays.jl\ncall SetPeriodicDomain function with a chosen grid size; e.g. np=16","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"np=16\n\nΓ=simple_periodic_domain(np);\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.3-Time-and-Velocity-Fields","page":"Single Particle Simulation","title":"1.3 Time & Velocity Fields","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"define time range\ndefine velocity field(s)\nstore in 𝑃 (dictionary) with grid variables","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"#time range\nt0=0.0\nt1=0.95*2*pi\n#t1=2.95*2*pi\n\n#solid-body rotation around central location\ni=Int(np/2+1)\nu=-(Γ[\"YG\"].-Γ[\"YG\"][1][i,i])\nv=(Γ[\"XG\"].-Γ[\"XG\"][1][i,i])\n\n#add some convergence to / divergence from central location\nd=0.0\n#d=-0.10\nu=u+d*(Γ[\"XG\"].-Γ[\"XG\"][1][i,i])\nv=v+d*(Γ[\"YG\"].-Γ[\"YG\"][1][i,i])\n\n#store everything in a dictionnary\n𝑃=Dict(\"u0\" => u, \"u1\" => u, \"v0\" => v, \"v1\" => v, \"t0\" => t0, \"t1\" => t1)\n𝑃=merge(𝑃,Γ);\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.4-Initial-Position-and-Time","page":"Single Particle Simulation","title":"1.4 Initial Position and Time","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"u0=np*[1/3,1/3]\ndu=fill(0.0,2)\n𝑇 = (𝑃[\"t0\"],𝑃[\"t1\"]);\nnothing #hide","category":"page"},{"location":"basics/solid_body_rotation/#.1-Solve-For-Particle-Trajectory","page":"Single Particle Simulation","title":"2.1 Solve For Particle Trajectory","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"ODEProblem formulates the differential equation along with the time period 𝑇, parameters 𝑃\nsolve then performs the integration over 𝑇, starting from u0","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"For additional documentation, try ?ODEProblem or ?solve","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"prob = ODEProblem(⬡,u0,𝑇,𝑃)\nsol = solve(prob,Tsit5(),reltol=1e-8)\n\nx,y=sol[1,:],sol[2,:]\nnt=length(x)","category":"page"},{"location":"basics/solid_body_rotation/#.2-Visualize-Particle-Trajectory","page":"Single Particle Simulation","title":"2.2 Visualize Particle Trajectory","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"define myplot convenience function\ngenerate animation using myplot\nsingle plot example using myplot","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"myplot(i)=plot(x[1:i],y[1:i],linewidth=2,arrow = 2,\n    title=\"Solid body rotation / Spiral example\",leg=false,\n    xaxis=\"x\",yaxis=\"y\",xlims=(0,np),ylims=(0,np))","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Animation example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"if false\np=Int(ceil(nt/100))\nanim = @animate for i ∈ 1:p:nt\n    myplot(i)\nend\npth=tempdir()*\"/\"\ngif(anim, pth*\"SolidBodyRotation.gif\", fps = 15)\nend","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"Single plot example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"plt=myplot(nt)\nscatter!(plt,[u0[1]],[u0[2]])\n#savefig(plt,pth*\"SolidBodyRotation.png\")","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle Simulation","title":"Single Particle Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#List-Of-Examples","page":"Examples","title":"List Of Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A solid-body-rotation example is used for unit testing:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"test/runtests.jl\nexamples/SolidBodyRotation.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: SolidBodyRotation)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Two examples using ⬡! and update_locations.jl:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"examples/RandomFlow_fleet.jl","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: RandomFlow)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and examples/GlobalDomain_fleet.jl for the real ocean:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Plotting recipes using three popular plotting packages:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"examples/recipes_plots.jl\nexamples/recipes_makie.jl\nexamples/recipes_pyplot.jl\t","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Three other examples using ⬡  are documented in the API Guide:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"examples/examples123.jl\nexamples/example2fleet.jl\nexamples/example2more.jl","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/particle_cloud.jl\"","category":"page"},{"location":"basics/particle_cloud/#Particle-Cloud-Simulation","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"This notebook uses the same setup as detailed_look.jl / example2(). For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/particle_cloud/#.-Import-Software","page":"Particle Cloud Simulation","title":"1. Import Software","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"using IndividualDisplacements, OrdinaryDiffEq, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))","category":"page"},{"location":"basics/particle_cloud/#.-Setup-Problem","page":"Particle Cloud Simulation","title":"2. Setup Problem","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"uvetc=example2_setup()\n\n#ii1=1:10:80; ii2=1:10:42; #->sol is (2, 40, 40065)\n#ii1=30:37; ii2=16:20; #->sol is (2, 40, 9674)\n#ii1=10:17; ii2=16:20; #->sol is (2, 40, 51709)\nii1=5:5:40; ii2=5:5:25; #->sol is (2, 40, 51709)\n\nn1=length(ii1); n2=length(ii2);\nu0=Array{Float64,2}(undef,(2,n1*n2))\nfor i1 in eachindex(ii1); for i2 in eachindex(ii2);\n        i=i1+(i2-1)*n1\n        u0[1,i]=ii1[i1]-0.5\n        u0[2,i]=ii2[i2]-0.5\nend; end;\nnothing #hide","category":"page"},{"location":"basics/particle_cloud/#.-Compute-Trajectories","page":"Particle Cloud Simulation","title":"3. Compute Trajectories","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"Define an ODE problem.\nSolve the ODE problem to compute trajectories.","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"𝑇 = (0.0,2998.0*3600.0)\nprob = ODEProblem(⬡,u0,𝑇,uvetc)\n\nsol = solve(prob,Tsit5(),reltol=1e-6,abstol=1e-6)\nsize(sol)","category":"page"},{"location":"basics/particle_cloud/#.-Display-results","page":"Particle Cloud Simulation","title":"4. Display results","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"ID=collect(1:size(sol,2))*ones(1,size(sol,3))\nlon=5000* mod.(sol[1,:,:],80); lat=5000* mod.(sol[2,:,:],42)\ndf = DataFrame(ID=Int.(ID[:]), lon=lon[:], lat=lat[:])\nplt=PlotBasic(df,size(sol,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"Compare with trajectory output from MITgcm","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"df_from_mitgcm=read_flt(joinpath(p,\"../examples/flt_example/\"),Float32)\nplt=PlotBasic(df_from_mitgcm,40,100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud Simulation","title":"Particle Cloud Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/random_flow_field.jl\"","category":"page"},{"location":"basics/random_flow_field/#Random-Flow-Simulation","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Simulate trajectories of a particle cloud in a randomly generated flow field. A doubly periodic domain is used and an animation generated. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"<img src=\"https://github.com/JuliaClimate/IndividualDisplacements.jl/raw/master/examples/figs/RandomFlow.gif\" width=\"60%\">","category":"page"},{"location":"basics/random_flow_field/#.1-Import-Software","page":"Random Flow Simulation","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"using OrdinaryDiffEq, IndividualDisplacements, MeshArrays\np=dirname(pathof(MeshArrays)); include(joinpath(p,\"../examples/Demos.jl\"))\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))","category":"page"},{"location":"basics/random_flow_field/#.2-Setup-Problem","page":"Random Flow Simulation","title":"1.2 Setup Problem","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Put grid variables in a dictionary.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"np=8\nnq=12\nΓ=simple_periodic_domain(np,nq);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"Derive flow field from randomly generated ϕ streamfunction","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"𝑃,ϕ=setup_random_flow(Γ);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.3-Initial-Conditions","page":"Random Flow Simulation","title":"1.3 Initial Conditions","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"x0,x1=np .*(0.4,0.6)\ny0,y1=np .*(0.4,0.6)\n\nn=100\nx0=x0 .+(x1-x0).*rand(n)\ny0=y0 .+(y1-y0).*rand(n)\n\nu0=transpose([x0[:] y0[:] ones(size(x0[:]))]);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.1-Compute-Trajectories","page":"Random Flow Simulation","title":"2.1 Compute Trajectories","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"𝑇 = (𝑃[\"t0\"],𝑃[\"t1\"])\nprob = ODEProblem(⬡!,u0,𝑇,𝑃)\nsol = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-5)\nsize(sol)","category":"page"},{"location":"basics/random_flow_field/#.2-Process-Output","page":"Random Flow Simulation","title":"2.2 Process Output","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"df=postprocess_xy(sol,𝑃);\nnothing #hide","category":"page"},{"location":"basics/random_flow_field/#.3-Plot-Results","page":"Random Flow Simulation","title":"2.3 Plot Results","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"For example, generate a simple animation (with if true):","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"if false\nanim = @animate for t in 0:2.0:maximum(df[!,:t])\n   phi_and_subset(Γ,ϕ,df,t)\nend\npth=tempdir()*\"/\"\ngif(anim, pth*\"RandomFlow.gif\", fps = 15)\nend","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow Simulation","title":"Random Flow Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"EditURL = \"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/basics/detailed_look.jl\"","category":"page"},{"location":"basics/detailed_look/#A-Detailed-Look","page":"A Detailed Look","title":"A Detailed Look","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"A Detailed Look at spatial interpolation, temporal integration, and input/output. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"In this example we :","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"put together uvetc dictionnary\nread gridded velocity output (Udata, Vdata)\nread trajectory output (float_traj*data)\ninterpolate U,V along trajectory from gridded output\ncompare with u,v from float_traj*data\ncompute whole trajectory using OrdinaryDiffEq.jl\ncompare with x(t),y(t) from float_traj*data","category":"page"},{"location":"basics/detailed_look/#.-Import-Software","page":"A Detailed Look","title":"1. Import Software","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"using IndividualDisplacements, OrdinaryDiffEq\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"));\nnothing #hide","category":"page"},{"location":"basics/detailed_look/#.-Read-Trajectory-Output","page":"A Detailed Look","title":"2. Read Trajectory Output","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"get_flt_ex_if_needed()\ndirIn=joinpath(p,\"../examples/flt_example/\")\nprec=Float32\ndf=read_flt(dirIn,prec) #function exported by IndividualDisplacements\nplt=PlotBasic(df,300,100000.0)","category":"page"},{"location":"basics/detailed_look/#.-Read-Gridded-Variables","page":"A Detailed Look","title":"3. Read Gridded Variables","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"via MeshArrays.jl and into a dictionary","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"uvetc=example2_setup()","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Velocity-Fields","page":"A Detailed Look","title":"4. Visualize Velocity Fields","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"plt=heatmap(uvetc[\"mskW\"][1,1].*uvetc[\"u0\"][1,1],title=\"U at the start\")\n\nplt=heatmap(uvetc[\"mskW\"][1,1].*uvetc[\"u1\"][1,1]-uvetc[\"u0\"][1,1],title=\"U end - U start\")","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Trajectories","page":"A Detailed Look","title":"5. Visualize Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"(select one trajectory)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmp=df[df.ID .== 200, :]\ntmp[1:4,:]","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Super-impose trajectory over velocity field (first for u ...)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"x=uvetc[\"XG\"].f[1][:,1]\ny=uvetc[\"YC\"].f[1][1,:]\nz=transpose(uvetc[\"mskW\"][1].*uvetc[\"u0\"][1,1])\nplt=contourf(x,y,z,c=:delta)\nplot!(tmp[:,:lon],tmp[:,:lat],c=:red,w=4,leg=false)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Super-impose trajectory over velocity field (... then for v)","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"x=uvetc[\"XC\"].f[1][:,1]\ny=uvetc[\"YG\"].f[1][1,:]\nz=transpose(uvetc[\"mskW\"][1].*uvetc[\"v0\"][1,1])\nplt=contourf(x,y,z,c=:delta)\nplot!(tmp[:,:lon],tmp[:,:lat],c=:red,w=4,leg=false)","category":"page"},{"location":"basics/detailed_look/#.-Interpolate-Velocities","page":"A Detailed Look","title":"6. Interpolate Velocities","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"uInit=[tmp[1,:lon];tmp[1,:lat]]./uvetc[\"dx\"]\nnSteps=Int32(tmp[end,:time]/3600)-2\ndu=fill(0.0,2);\nnothing #hide","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Visualize and compare with actual grid point values – jumps on the tangential component are expected with linear scheme:","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpx=fill(0.0,100)\nfor i=1:100\n    tmpx[i]=500.0 *i./uvetc[\"dx\"]\n    ⬡(du,[tmpx[i];0.499./uvetc[\"dx\"]],uvetc,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend\nplt=plot(tmpx,tmpu,label=\"u (interp)\")\nplot!(uvetc[\"XG\"].f[1][1:10,1]./uvetc[\"dx\"],uvetc[\"u0\"].f[1][1:10,1],marker=:o,label=\"u (C-grid)\")\nplot!(tmpx,tmpv,label=\"v (interp)\")\nplot!(uvetc[\"XG\"].f[1][1:10,1]./uvetc[\"dx\"],uvetc[\"v0\"].f[1][1:10,1],marker=:o,label=\"v (C-grid)\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"And similarly in the other direction","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpy=fill(0.0,100)\nfor i=1:100\n    tmpy[i]=500.0 *i./uvetc[\"dx\"]\n    ⬡(du,[0.499./uvetc[\"dx\"];tmpy[i]],uvetc,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend\nplt=plot(tmpx,tmpu,label=\"u (interp)\")\nplot!(uvetc[\"YG\"].f[1][1,1:10]./uvetc[\"dx\"],uvetc[\"u0\"].f[1][1,1:10],marker=:o,label=\"u (C-grid)\")\nplot!(tmpx,tmpv,label=\"v (interp)\")\nplot!(uvetc[\"YG\"].f[1][1,1:10]./uvetc[\"dx\"],uvetc[\"v0\"].f[1][1,1:10],marker=:o,label=\"v (C-grid)\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Compare recomputed velocities with those from pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"nSteps=2998\ntmpu=fill(0.0,nSteps); tmpv=fill(0.0,nSteps);\ntmpx=fill(0.0,nSteps); tmpy=fill(0.0,nSteps);\nrefu=fill(0.0,nSteps); refv=fill(0.0,nSteps);\nfor i=1:nSteps\n    □(du,[tmp[i,:lon],tmp[i,:lat]],tmp,tmp[i,:time])\n    refu[i]=du[1]./uvetc[\"dx\"]\n    refv[i]=du[2]./uvetc[\"dx\"]\n    ⬡(du,[tmp[i,:lon],tmp[i,:lat]]./uvetc[\"dx\"],uvetc,tmp[i,:time])\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"plt=plot(tmpu,label=\"u\")\nplot!(tmpv,label=\"v\")\nplot!(refu,label=\"u (ref)\")\nplot!(refv,label=\"v (ref)\")","category":"page"},{"location":"basics/detailed_look/#.-Compute-Trajectories","page":"A Detailed Look","title":"6. Compute Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Solve through time using OrdinaryDiffEq.jl with","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"⬡ is the function computing du/dt\nuInit is the initial condition u @ tspan[1]\ntspan is the time interval\nuvetc are parameters for ⬡\nTsit5 is the time-stepping scheme\nreltol and abstol are tolerance parameters","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"tspan = (0.0,nSteps*3600.0)\n#prob = ODEProblem(□,uInit,tspan,tmp)\nprob = ODEProblem(⬡,uInit,tspan,uvetc)\nsol = solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\nsol[1:4]","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"Compare recomputed trajectories with originals from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"ref=transpose([tmp[1:nSteps,:lon] tmp[1:nSteps,:lat]])\nmaxLon=80*5.e3\nmaxLat=42*5.e3\nshow(size(ref))\nfor i=1:nSteps-1\n    ref[1,i+1]-ref[1,i]>maxLon/2 ? ref[1,i+1:end]-=fill(maxLon,(nSteps-i)) : nothing\n    ref[1,i+1]-ref[1,i]<-maxLon/2 ? ref[1,i+1:end]+=fill(maxLon,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]>maxLat/2 ? ref[2,i+1:end]-=fill(maxLat,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]<-maxLat/2 ? ref[2,i+1:end]+=fill(maxLat,(nSteps-i)) : nothing\nend\nref=ref./uvetc[\"dx\"]\n\nplt=plot(sol[1,:],sol[2,:],linewidth=5,title=\"Using Recomputed Velocities\",\n     xaxis=\"lon\",yaxis=\"lat\",label=\"Julia Solution\") # legend=false\nplot!(ref[1,:],ref[2,:],lw=3,ls=:dash,label=\"MITgcm Solution\")","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"","category":"page"},{"location":"basics/detailed_look/","page":"A Detailed Look","title":"A Detailed Look","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#IndividualDisplacements.jl","page":"Home","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inter-operability with common climate model grids and their representation in MeshArrays.jl is a central element. The package can also read and plot trajectory simulation output from e.g. the MITgcm. It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contents:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"examples.md\",\"API.md\"]\nDepth = 3","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: simulated particle movie (300m))","category":"page"},{"location":"API/#API-Guide","page":"API Guide","title":"API Guide","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"The ⬡ and ⬡! functions compute the tracked point / individual / agent velocities. ","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"⬡!\n⬡","category":"page"},{"location":"API/#IndividualDisplacements.⬡!","page":"API Guide","title":"IndividualDisplacements.⬡!","text":"VelComp!(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields (after exchange on u0,v0) and return position increment du (i.e. x,y,fIndex).\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.⬡","page":"API Guide","title":"IndividualDisplacements.⬡","text":"VelComp(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields and return position increment du\n\n\n\n\n\n","category":"function"},{"location":"API/#Setup-And-Postprocessing","page":"API Guide","title":"Setup And Postprocessing","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Convenience functions to initialize a simulation and posprocess the output are provided. ","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"initialize_lonlat\nrandn_lonlat\npostprocess_lonlat\npostprocess_xy","category":"page"},{"location":"API/#IndividualDisplacements.initialize_lonlat","page":"API Guide","title":"IndividualDisplacements.initialize_lonlat","text":"initialize_lonlat(Γ,lon,lat ; msk=missing)\n\nDefine initial condition (u0,du) in grid coordinates (Γ) from longitude & latitude vectors (lon,lat) optionally with a land mask (msk).\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.randn_lonlat","page":"API Guide","title":"IndividualDisplacements.randn_lonlat","text":"randn_lonlat(nn=1,seed=missing)\n\nRandomly distributed longitude, latitude positions on the sphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_lonlat","page":"API Guide","title":"IndividualDisplacements.postprocess_lonlat","text":"postprocess_lonlat()\n\nCopy sol to a DataFrame & map position to lon,lat coordinates\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_xy","page":"API Guide","title":"IndividualDisplacements.postprocess_xy","text":"postprocess_xy()\n\nCopy sol to a DataFrame & map position to x,y coordinates, and define time axis for a simple doubly periodic domain\n\n\n\n\n\n","category":"function"},{"location":"API/#Read-Output-From-File","page":"API Guide","title":"Read Output From File","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Trajectory simulated by the MITgcm or observed by the global drifter program can be read from file.","category":"page"},{"location":"API/","page":"API Guide","title":"API Guide","text":"read_flt\nread_drifters","category":"page"},{"location":"API/#IndividualDisplacements.read_flt","page":"API Guide","title":"IndividualDisplacements.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.read_drifters","page":"API Guide","title":"IndividualDisplacements.read_drifters","text":"read_drifters(pth,lst;chnk=Inf,rng=(missing,missing))\n\nRead near-surface drifter data (https://doi.org/10.1002/2016JC011716) from the Global Drifter Program (https://doi.org/10.25921/7ntx-z961) into a DataFrame\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth=\"Drifter_hourly_v013/\"\nlst=[\"driftertrajGPS_1.03.nc\",\"driftertrajWMLE_1.02_block1.nc\",\"driftertrajWMLE_1.02_block2.nc\",\n   \"driftertrajWMLE_1.02_block3.nc\",\"driftertrajWMLE_1.02_block4.nc\",\"driftertrajWMLE_1.02_block5.nc\",\n   \"driftertrajWMLE_1.02_block6.nc\",\"driftertrajWMLE_1.03_block7.nc\"]\n\n#df=read_drifters( pth*lst[end],chnk=1000,rng=(2014.1,2014.2) )\n\ndf = DataFrame(lon=[], lat=[], t=[], ID=[])\nfor fil in lst\n   println(fil)\n   append!(df,read_drifters( pth*fil,chnk=10000,rng=(2005.0,2020.0) ))\n   println(size(df))\nend\n\n#sort!(df, [:t, :lat])\n#CSV.write(pth*\"Drifter_hourly_2005_2019.csv\", df)\n#unID=unique(df[!,:ID])\n\n\n\n\n\n","category":"function"},{"location":"API/#Types","page":"API Guide","title":"Types","text":"","category":"section"},{"location":"API/","page":"API Guide","title":"API Guide","text":"Modules = [IndividualDisplacements]\nOrder   = [:type]","category":"page"}]
}
