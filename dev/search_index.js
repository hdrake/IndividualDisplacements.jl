var documenterSearchIndex = {"docs":
[{"location":"worldwide/global_ocean_circulation/#Global-Climatology","page":"Global Climatology","title":"Global Climatology","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"(Image: ) (Image: )","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"Advect particles with climatological monthly mean flow at selected depth level (e.g. k=10 for 95 m) from a global ocean state estimate (ECCO v4 r2 ; see also https://ecco-group.org) which is here repeated for ny years. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Get-Software-and-Iput-Files","page":"Global Climatology","title":"1. Get Software & Iput Files","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"packages + helper functions\ngrid and velocity files","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"using IndividualDisplacements, MeshArrays, OrdinaryDiffEq\nusing Statistics, DataFrames, MITgcmTools, OceanStateEstimation\n\ninclude(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/helper_functions.jl\"))\nIndividualDisplacements.get_ecco_velocity_if_needed();","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Set-Up-Parameters-and-Inputs","page":"Global Climatology","title":"2. Set Up Parameters & Inputs","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"select vertical level & duration in years\nread grid variables & velocities\nnormalize velocities","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùëÉ=setup_global_ocean(k=1,ny=2);\n\nkeys(ùëÉ)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Main-Computation-Loop","page":"Global Climatology","title":"3. Main Computation Loop","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/#.1-Initialize-Individuals-and-Solution","page":"Global Climatology","title":"3.1 Initialize Individuals & Solution","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"initial particle positions randomly over Global Ocean","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"xy = init_global_randn(1000,ùëÉ)\nxy = permutedims([xy[:,i] for i in 1:size(xy,2)])\n\nI=(position=xy,velocity=dxy_dt!,\n   postprocessing=postprocess_lonlat,parameters=ùëÉ)\nùêº=Individuals(I)\n\nfieldnames(typeof(ùêº))","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"initial integration from time 0 to 0.5 month","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"worldwide/global_ocean_circulation/#.2-Iteration-function-example","page":"Global Climatology","title":"3.2 Iteration function example","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"ùêº.ùëÉ.üîÑ(ùêº.ùëÉ,t_œµ) resets the velocity input streams to bracket t_œµ=ùêº.ùëÉ.ùëá[2]+eps(ùêº.ùëÉ.ùëá[2])\nreset_lonlat!(ùêº) randomly selects a fraction (defined in setup_global_ocean()) of the particles and resets their positions before each integration period. This can maintain homogeneous coverage of the Global Ocean by particles.\n‚à´!(ùêº,ùëá) then solves for the individual trajectories over one month, after updating velocity fields (ùêº.u0 etc) if needed, and adds diagnostics to the DataFrame used to record / trace variables along the trajectory (ùêº.tr).","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"function step!(ùêº::Individuals)\n    t_œµ=ùêº.ùëÉ.ùëá[2]+eps(ùêº.ùëÉ.ùëá[2])\n    ùêº.ùëÉ.üîÑ(ùêº.ùëÉ,t_œµ)\n    reset_lonlat!(ùêº)\n    ùëá=Tuple(ùêº.ùëÉ.ùëá)\n    ‚à´!(ùêº,ùëá)\nend","category":"page"},{"location":"worldwide/global_ocean_circulation/#.3-Iterate-For-ny*12-Months","page":"Global Climatology","title":"3.3 Iterate For ny*12 Months","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"[step!(ùêº) for y=1:2, m=1:12]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.4-Compute-summary-statistics","page":"Global Climatology","title":"3.4 Compute summary statistics","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"See DataFrames.jl documentation for detail and additinal functionalities.","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"gdf = groupby(ùêº.üî¥, :ID)\nsgdf= combine(gdf,nrow,:lat => mean)\nsgdf[rand(1:size(sgdf,1),4),:]","category":"page"},{"location":"worldwide/global_ocean_circulation/#.-Plot-trajectories-/-individual-positions","page":"Global Climatology","title":"4. Plot trajectories / individual positions","text":"","category":"section"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"using Plots\np=plot(;xlims=(-180,180),ylims=(-90,90),legend=:none)\np!(x,y)=scatter!(p,x,y,markersize=1.1,markerstrokewidth=0)\n[p!(gdf[i].lon,gdf[i].lat) for i in rand(collect(1:length(gdf)),10)]\ndisplay(p)","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"Or select a background map (e.g. lon, lat, and DL=log10(bottom depth)) and a recipe to superimpose initial and final locations. Try:","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"#```\n#include(joinpath(dirname(pathof(IndividualDisplacements)),\"../examples/recipes_plots.jl\"))\n#plot_end_points(ùêº,ùêº.ùëÉ.Œì)\n#```","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"","category":"page"},{"location":"worldwide/global_ocean_circulation/","page":"Global Climatology","title":"Global Climatology","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/solid_body_rotation/#Single-Particle","page":"Single Particle","title":"Single Particle","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Simulate the trajectory of an individual point, first in a perfectly circular flow (a.k.a. solid body rotation). Then add a convergent term to obtain a spiraling trajectory, and a constant vertical velocity for the third dimension. These simple flow configurations can be thought of as idealized models e.g. ocean meso-scale eddies.","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"(Image: solid body rotation)","category":"page"},{"location":"basics/solid_body_rotation/#Problem-Configuration","page":"Single Particle","title":"1 Problem Configuration","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Here we set up software, grid, flow fields, initial conditions.","category":"page"},{"location":"basics/solid_body_rotation/#.1-Import-Software","page":"Single Particle","title":"1.1 Import Software","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"using IndividualDisplacements, DataFrames\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))","category":"page"},{"location":"basics/solid_body_rotation/#.2-Gridded-Domain","page":"Single Particle","title":"1.2  Gridded Domain","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"np,nz=16,4 #horizontal and vertical domain size\nŒì=simple_periodic_domain(np)","category":"page"},{"location":"basics/solid_body_rotation/#.3-Velocity-Fields","page":"Single Particle","title":"1.3 Velocity Fields","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Exercise: find simple_flow_field within helper_functions.jl and modify the flow field parameters (e.g. intensity and sign of the convergent term).","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"u,v,w=simple_flow_field(Œì,np,nz)","category":"page"},{"location":"basics/solid_body_rotation/#.4-Velocity-Function","page":"Single Particle","title":"1.4 Velocity Function","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"üöÑ relies only on parameters (velocity fields, grid, etc) contained in ùëÉ to compute velocity at the space-time position of the individual. The solver (here: solv) can then integrate over time the result of üöÑ (see OrdinaryDiffEq.jl docs).","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"üöÑ = dxyz_dt\n\nùëÉ=(u0=u, u1=u, v0=v, v1=v,w0=0.0*w, w1=1.0*w, ùëá=[0,19.95*2*pi], ioSize=(np,np,nz))\n\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-8)","category":"page"},{"location":"basics/solid_body_rotation/#.5-Initial-Position","page":"Single Particle","title":"1.5 Initial Position","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Here we set up just one individual in a three-dimensional space,","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"üìå=[np*1/3,np*1/3,nz*1/3]","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"and the data structure (DataFrame) to record properties along the individual's path accordingly. It is the postprocessing function's responsibility to provide the record. It is thus important that this intermediary (postproc) be consistent with the solver setup (sol) and the expected record format (üî¥).","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"üî¥ = DataFrame(ID=Int[], x=Float64[], y=Float64[], z=Float64[], t=Float64[])\n\nfunction postproc(sol,ùëÉ::NamedTuple;id=missing,ùëá=missing)\n    df=postprocess_xy(sol,ùëÉ,id=id,ùëá=ùëá)\n    #add third coordinate\n    z=sol[3,:]\n    df.z=z[:]\n    return df\nend","category":"page"},{"location":"basics/solid_body_rotation/#Trajectory-Simulations","page":"Single Particle","title":"2 Trajectory Simulations","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Now that every thing needed to carry out the computation is in place, we wrap up the problem configuration in a struct (Individuals) which links to the initial positions, flow fields, etc. all that will be necessary to compute trajectories over time (‚à´!(ùêº,ùëá)). Simple methods to visualize the individual trajectory (plot or movie) are provided at the end.","category":"page"},{"location":"basics/solid_body_rotation/#.1-Setup-Individuals","page":"Single Particle","title":"2.1 Setup Individuals","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"#assemble as a NamedTuple:\nI=(position=üìå,record=üî¥,velocity=üöÑ,\nintegration=solv,postprocessing=postproc,parameters=ùëÉ)\n\n#construct Individuals from NamedTuple:\nùêº=Individuals(I)","category":"page"},{"location":"basics/solid_body_rotation/#.2-Compute-Trajectories","page":"Single Particle","title":"2.2 Compute Trajectories","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"The ‚à´! function call below returns the final positions & updates ùêº.üìå accordingly. It also records properties observed along the trajectory in ùêº.üî¥","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"basics/solid_body_rotation/#.3-Visualize-Trajectories","page":"Single Particle","title":"2.3 Visualize Trajectories","text":"","category":"section"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"define myplot convenience function\ngenerate animation using myplot\nsingle plot example using myplot","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"p=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"));\nnt=length(ùêº.üî¥.x)\n\nmyplot(i)=plot(ùêº.üî¥.x[1:i],ùêº.üî¥.y[1:i],ùêº.üî¥.z[1:i],linewidth=2,arrow = 2,\n    title=\"Solid body rotation / Spiral example\",leg=false,\n    xaxis=\"x\",yaxis=\"y\",zaxis=\"z\",xlims=(0,np),ylims=(0,np));","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Single plot example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"plt=myplot(nt)\nscatter!(plt,[üìå[1]],[üìå[2]],[üìå[3]])\n#scatter!(plt,[ùêº.üî¥.x[end]],[ùêº.üî¥.y[end]],[ùêº.üî¥.z[end]])\nscatter!(plt,[ùêº.üìå[1]],[ùêº.üìå[2]],[ùêº.üìå[3]])","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Animation example:","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"p=Int(ceil(nt/100))\nanim = @animate for i ‚àà 1:p:nt\n    myplot(i)\nend\n\npth=tempdir()*\"/\"\ngif(anim, pth*\"SolidBodyRotation.gif\", fps = 15)","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"Exercise: make the sinking velocity decrease with time (hint: it increases as specified above in the original notebook); change the number of times the particle goes around the origin; etc","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"","category":"page"},{"location":"basics/solid_body_rotation/","page":"Single Particle","title":"Single Particle","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#Summary","page":"Example Guide","title":"Summary","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"The four examples outlined below form a tutorial, and thus complement the rest of the package documentation. Afterwards, we provide a listing of other examples, plotting recipes, and tools included in the package. ","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"A user seeking to configure IndividualDisplacements.jl for a new problem might also find, hopefully useful, examples of data wrangling codes in helper_functions.jl. They define grids and ingest velocity fields for the examples below. ","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Output is in DataFrames tabular format which readily provides powerful and convenient analysis methods. Plotting trajectories in space and time, for example, can be done as in recipes_plots.jl, recipes_makie.jl, and recipes_pyplot.jl (see examples).","category":"page"},{"location":"examples/#Single-Particle-Example","page":"Example Guide","title":"Single Particle Example","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Here we start with a three-dimensional flow field u,v,w, initialize a single particle / individual position üìå, and wrap everything up within a custom data structure ùêº.","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"The individual(s) in ùêº is then displaced by integrating its instantaneous velocity, moving along through space, over time ùëá.  This is generally the main computation done in this package ‚Äì interpolating u,v,w to individual positions ùêº.üìå on the fly, using ùêº.üöÑ, and integrating through time, using ùêº.‚à´.","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"The flow field consists of rigid body rotation, plus a convergent term, plus a sinking term in the third direction. This generates a downward, converging spiral ‚Äì a idealized version of a relevant case in the Ocean.","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"(Image: SolidBodyRotation)","category":"page"},{"location":"examples/#Particle-Set-Example","page":"Example Guide","title":"Particle Set Example","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Here we illustrate how one can simply go from a velocity array to solving for trajectories. The included convenience function (constructor) defines a grid based on input array dimensions, adds the initial condition and time range, and returns the Individuals data structure ùêº. ","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"A random flow field is generated on a doubly periodic grid, and used to advect a cloud of points ‚Äì just by calling ‚à´!(ùêº). Exercises include the non-periodic domain case, statistics made easy via DataFrames.jl, and replacing the flow field with your own.","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"(Image: RandomFlow)","category":"page"},{"location":"examples/#Global-Ocean-Circulation","page":"Example Guide","title":"Global Ocean Circulation","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"A simulation over the global ocean based on a data-constrained, realistic, model:","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"(Image: simulated particle movie (5m))","category":"page"},{"location":"examples/#Three-Dimensional-Paths","page":"Example Guide","title":"Three Dimensional Paths","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"A simulation over the global ocean based on a data-constrained, realistic, model:","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"(Image: simulated particle movie (3D))","category":"page"},{"location":"examples/#Tool-Box,-Etc.","page":"Example Guide","title":"Tool Box, Etc.","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Tools included in src/compute.jl and data_wrangling.jl:","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"- Velocity interpolaton functions for several array / grid types.\n- Preprocessing and postprocessing methods.\n- I/O routines to read / write results from / to file.","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Examples reproducing trajectories that had been computed earlier in Fortran (MITgcm/pkg/flt) are detailed_look.jl and particle_cloud.jl. \nFor more see also: example_CyclicArray.jl, example123.jl, helper_functions.jl; and for plotting : recipes_plots.jl, recipes_makie.jl, recipes_pyplot.jl also in the examples/ folder.","category":"page"},{"location":"examples/#Running-The-Examples","page":"Example Guide","title":"Running The Examples","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"Running the examples requires julia and its relevant packages. Inputs get downloaded as needed upon running the examples. The first three steps below do this, and generate jupyter notebook versions of the examples (easy to rerun afterwards). Once everything is setup then user can just call examples directly in julia (i.e., skip to last step below).","category":"page"},{"location":"examples/#.-Download-the-examples-folder:","page":"Example Guide","title":"1. Download the examples folder:","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"git clone https://github.com/JuliaClimate/IndividualDisplacements.jl\njulia --project=IndividualDisplacements.jl/docs/","category":"page"},{"location":"examples/#.-Get-all-needed-packages-and-IndividualDisplacements.jl:","page":"Example Guide","title":"2. Get all needed packages and IndividualDisplacements.jl:","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"using Pkg\nPkg.activate(\"IndividualDisplacements.jl/docs/\")\nPkg.instantiate()\nPkg.add(\"IndividualDisplacements\")","category":"page"},{"location":"examples/#.-Generate-jupyter-notebook-using-Literate.jl:","page":"Example Guide","title":"3. Generate jupyter notebook using Literate.jl:","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"using Literate\nLiterate.notebook(\"IndividualDisplacements.jl/examples/basics/solid_body_rotation.jl\", \".\", execute = true, documenter = false)\nLiterate.notebook(\"IndividualDisplacements.jl/examples/worldwide/three_dimensional_ocean.jl\", \".\", execute = true, documenter = false)","category":"page"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"And so on and so forth ‚Äì see documentation for a list of examples.","category":"page"},{"location":"examples/#.-or-alternatively,-in-the-julia-REPL:","page":"Example Guide","title":"4. or alternatively, in the julia REPL:","text":"","category":"section"},{"location":"examples/","page":"Example Guide","title":"Example Guide","text":"using IndividualDisplacements\np=dirname(pathof(IndividualDisplacements))\ninclude(p*\"/../examples/worldwide/global_ocean_circulation.jl\")","category":"page"},{"location":"workflow/#Scope-/-Goals","page":"User Guide","title":"Scope / Goals","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"A central goal of this package is to support scientific analysis of climate model output and observed drifts of e.g. plastics in the Ocean or chemical coumponds in the Atmosphere. To start, the package supports all types of gridded model output MIT General Circulation Model by exploiting the MeshArrays.jl package (docs found here). The tool box in this package also provides functions to ingest trajectory data which have been collected by the Ocean Drifting Buoy Program over the real Ocean (movie) or computed by MITgcm.","category":"page"},{"location":"workflow/#Typical-Workflow","page":"User Guide","title":"Typical Workflow","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"As documented in the examples, the typical worflow is:","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"set up the Individuals data structure\ndisplace them via ‚à´!\npost-process / analyze / plot\ngo back to 2 and continue","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"The velocity interpolation funtions (üöÑ used in step 2; documented below) interpolate gridded output to positions üìå. Steps 3 and 4 are optional. Step 2 also provides the option to post-process results recorded in üî¥ when ‚à´! calls üîß before updating positions üìå. Since üî¥ is in the DataFrames tabular format, it is easily manipulated or plotted. Ingestion of time varying flow fields, three-dimensional ocean trajectory simulations, process oriented configurations, as well as plotting and data formats are further documented via the examples. ","category":"page"},{"location":"workflow/#Core-Functions","page":"User Guide","title":"Core Functions","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"‚à´!(ùêº,ùëá) displaces individuals ùêº continuously over time period ùëá according to velocity function üöÑ, temporal integration method / solver ‚à´, and post-processing workflow üîß (all embedded within ùêº).","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"‚à´!","category":"page"},{"location":"workflow/#IndividualDisplacements.‚à´!","page":"User Guide","title":"IndividualDisplacements.‚à´!","text":"‚à´!(ùêº::Individuals,ùëá::Tuple)\n\nDisplace simulated individuals continuously through space over time period ùëá starting from position üìå. \n\nThis is typically achieved by computing the cumulative integral of velocity experienced by each individual along its trajectory (‚à´ üöÑ dt).\nThe current default is solve(prob,Euler(),dt=day) but all solver options from the OrdinaryDiffEq.jl package are available.\nAfter this, ‚à´! is also equiped to postprocess results recorded into üî¥ via the üîß workflow, and the last step in ‚à´! consiste in updating üìå to be ready for continuing in a subsequent call to ‚à´!.\n\n\n\n\n\n‚à´!(ùêº::Individuals)\n\nCall ‚à´!(ùêº::Individuals,ùêº.ùëÉ.ùëá)\n\n\n\n\n\n","category":"function"},{"location":"workflow/#Data-Structures","page":"User Guide","title":"Data Structures","text":"","category":"section"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"The Individuals struct contains velocity fields (arrays), etc, and a record of properties diagnozed along the way.","category":"page"},{"location":"workflow/","page":"User Guide","title":"User Guide","text":"Modules = [IndividualDisplacements]\nOrder   = [:type]","category":"page"},{"location":"workflow/#IndividualDisplacements.Individuals","page":"User Guide","title":"IndividualDisplacements.Individuals","text":"struct Individuals{T}\n\nData:           üìå (position),   üî¥(record),           üÜî (ID)\nFunctions:      üöÑ (velocity),   ‚à´ (integration), üîß(postprocessing)\nNamedTuples:    ùëÉ  (parameters), ùê∑ (diagnostics),      ùëÄ (metadata)\n\nDefault keyword constructor example:\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nùêº=Individuals{Float64}(üìå=zeros(3,10),üÜî=1:10,üî¥=deepcopy(df))\nùêº=Individuals(üìå=zeros(3,2),üÜî=collect(1:2),üî¥=deepcopy(df))\n\nPlain text (or no-unicode) constructor example:\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nI=(position=zeros(3,2),ID=1:2,record=deepcopy(df))\nI=Individuals(I)\n\nKeyword cheatsheet:\n\nüìå=\\:pushpin:<tab>,          üî¥=\\:red_circle:<tab>, üÜî=\\:id:<tab>\nüöÑ=\\:bullettrain_side:<tab>, ‚à´=\\int<tab>,          üîß=\\wrench<tab>\nùëÉ=\\itP<tab>,                 ùê∑=\\itD<tab>,           ùëÄ=\\itM<tab>\n\n\n\n\n\n","category":"type"},{"location":"workflow/#IndividualDisplacements.Individuals-Tuple{NamedTuple}","page":"User Guide","title":"IndividualDisplacements.Individuals","text":"Individuals(NT::NamedTuple)\n\nConstructor that uses a NamedTuple with only plain text keywords (i.e. no-unicode needed).\n\ndf=DataFrame( ID=[], x=[], y=[], z=[], t = [])\nI=(position=zeros(3,2),ID=1:2,record=deepcopy(df))\nI=Individuals(I)\n\n\n\n\n\n","category":"method"},{"location":"basics/particle_cloud/#Particle-Cloud","page":"Particle Cloud","title":"Particle Cloud","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"Using the same setup as detailed_look.jl or example2(), here we simulate a point cloud getting advected by the flow field. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/particle_cloud/#.-Import-Software","page":"Particle Cloud","title":"1. Import Software","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"using IndividualDisplacements, OrdinaryDiffEq, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"));","category":"page"},{"location":"basics/particle_cloud/#.-Setup-Problem","page":"Particle Cloud","title":"2. Setup Problem","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùëÉ,Œì=example2_setup()\n\nii1=5:5:40; ii2=5:5:25\nx=vec([x-0.5 for x in ii1, y in ii2])\ny=vec([y-0.5 for x in ii1, y in ii2])\nxy = permutedims([[x[i];y[i];1.0] for i in eachindex(x)])\n\nùëÉ.ùëá[:] = [0.0,2998*3600.0]\nsolv(prob) = solve(prob,Tsit5(),reltol=1e-6,abstol=1e-6)\ntr = DataFrame(ID=Int[], x=Float64[], y=Float64[], t=Float64[])\n\n#ùêº = Individuals{Float64,2}(üìå=xy[:,:], üî¥=tr, üÜî=collect(1:size(xy,2)),","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"                    üöÑ = dxy_dt, ‚à´ = solv, üîß = postprocess_xy, ùëÉ=ùëÉ);","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"I=(position=xy,record=deepcopy(tr),velocity=dxy_dt,\n   integration=solv,postprocessing=postprocess_xy,parameters=ùëÉ)\nùêº=Individuals(I)","category":"page"},{"location":"basics/particle_cloud/#.-Compute-Trajectories","page":"Particle Cloud","title":"3. Compute Trajectories","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùëá=(0.0,ùêº.ùëÉ.ùëá[2])\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"basics/particle_cloud/#.-Display-results","page":"Particle Cloud","title":"4. Display results","text":"","category":"section"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"ùêº.üî¥.lon=5000*ùêº.üî¥.x\nùêº.üî¥.lat=5000*ùêº.üî¥.y\nplt=PlotBasic(ùêº.üî¥,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"Compare with trajectory output from MITgcm","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"#df=read_flt(IndividualDisplacements.flt_example,Float32)\n#ref=PlotBasic(df,size(xy,2),100000.0)","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"","category":"page"},{"location":"basics/particle_cloud/","page":"Particle Cloud","title":"Particle Cloud","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/random_flow_field/#Random-Flow","page":"Random Flow","title":"Random Flow","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"Simulate trajectories of a particle cloud in a randomly generated flow field. A doubly periodic domain is used and an animation generated. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"(Image: particles in random flow)","category":"page"},{"location":"basics/random_flow_field/#.-Import-Software","page":"Random Flow","title":"1. Import Software","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"using IndividualDisplacements, DataFrames\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))","category":"page"},{"location":"basics/random_flow_field/#.-Setup-Problem","page":"Random Flow","title":"2. Setup Problem","text":"","category":"section"},{"location":"basics/random_flow_field/#.1-Sample-flow-field","page":"Random Flow","title":"2.1 Sample flow field","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"The u,v arrays below can be replaced with any other pair provided by the user. A couple of important considerations, however:","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"u,v are staggered on a C-grid; by -0.5 grid point in direction 1 for u (2 for v)","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"from the grid cell center (0.5,0.5)","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"u,v here derive from streamfunction œï, defined at the corner point, which ensures that","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"the resulting u,v is non-divergent, purely rotational, over the C-grid domain","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"In brief:","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"u=-(circshift(œï, (0,-1))-œï)\nv=(circshift(œï, (-1,0))-œï)","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"u,v,œï=setup_random_flow()","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"If user were to start with collocated velocity (uC,vC at the grid cell center) then one can easily obtain the staggered velocity (u,v) as follows. These may contain both rotational and divergent components.","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"u=0.5*(circshift(uC, (0,1))+uC)\nv=0.5*(circshift(vC, (1,0))+vC)","category":"page"},{"location":"basics/random_flow_field/#.2-Initialize-Individuals","page":"Random Flow","title":"2.2 Initialize Individuals","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"np,nq=size(u)\nx=np*(0.4 .+ 0.2*rand(100))\ny=nq*(0.4 .+ 0.2*rand(100))\n\nùêº=setup_point_cloud(u,v,X=x,Y=y)\n#ùêº.ùëÉ.ùëá[2]=1000.","category":"page"},{"location":"basics/random_flow_field/#.-Compute-Trajectories","page":"Random Flow","title":"3. Compute Trajectories","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"‚à´!(ùêº)","category":"page"},{"location":"basics/random_flow_field/#.-Plot-Results","page":"Random Flow","title":"4. Plot Results","text":"","category":"section"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"For example, generate a simple animation:","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"p=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"));\n\nüî¥_by_t = groupby(ùêº.üî¥, :t)\nanim = @animate for t in eachindex(üî¥_by_t)\n   phi_scatter(œï,üî¥_by_t[t])\nend\n\npth=tempdir()*\"/\"\ngif(anim, pth*\"RandomFlow.gif\", fps = 15)","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"","category":"page"},{"location":"basics/random_flow_field/","page":"Random Flow","title":"Random Flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"basics/detailed_look/#Detailed-Look","page":"Detailed Look","title":"Detailed Look","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"(Image: ) (Image: )","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"A more detailed Look at spatial interpolation, integration through time, and I/O. For additional documentation e.g. see 1, 2, 3, 4. Here we illustrate a few things in more detail:","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"reading velocities from file.\ngridded velocity output (Udata, Vdata)\npre-computed trajectory output (float_traj*data)\ninterpolating U,V from gridded output to individual locations\ncompared with u,v from float_traj*data\ncomputing trajectories (location v time) using OrdinaryDiffEq.jl\ncompared with x(t),y(t) from float_traj*data","category":"page"},{"location":"basics/detailed_look/#.-Import-Software","page":"Detailed Look","title":"1. Import Software","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"using IndividualDisplacements, OrdinaryDiffEq, DataFrames, MITgcmTools\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/recipes_plots.jl\"))\ninclude(joinpath(p,\"../examples/example123.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"));","category":"page"},{"location":"basics/detailed_look/#.-Read-Trajectory-Output","page":"Detailed Look","title":"2. Read Trajectory Output","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"dirIn=IndividualDisplacements.flt_example\nprec=Float32\ndf=read_flt(dirIn,prec);","category":"page"},{"location":"basics/detailed_look/#.-Read-Gridded-Variables","page":"Detailed Look","title":"3. Read Gridded Variables","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"using MeshArrays.jl and e.g. a NamedTyple","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"ùëÉ,Œì=example2_setup();","category":"page"},{"location":"basics/detailed_look/#.-Visualize-Velocity-Fields","page":"Detailed Look","title":"4. Visualize Velocity Fields","text":"","category":"section"},{"location":"basics/detailed_look/#.-Visualize-Trajectories","page":"Detailed Look","title":"5. Visualize Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"(select one trajectory)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmp=df[df.ID .== 200, :]\ntmp[1:4,:]","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Super-impose trajectory over velocity field (first for u ...)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"x=Œì[\"XG\"].f[1][:,1]\ny=Œì[\"YC\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.u0[1,1]);","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Super-impose trajectory over velocity field (... then for v)","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"x=Œì[\"XC\"].f[1][:,1]\ny=Œì[\"YG\"].f[1][1,:]\nz=transpose(Œì[\"mskW\"][1].*ùëÉ.v0[1,1]);","category":"page"},{"location":"basics/detailed_look/#.-Interpolate-Velocities","page":"Detailed Look","title":"6. Interpolate Velocities","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"uInit=[tmp[1,:lon];tmp[1,:lat]]./ùëÉ.dx\nnSteps=Int32(tmp[end,:time]/3600)-2\ndu=fill(0.0,2);","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Visualize and compare with actual grid point values ‚Äì jumps on the tangential component are expected with linear scheme:","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpx=fill(0.0,100)\nfor i=1:100\n    tmpx[i]=500.0 *i./ùëÉ.dx\n    dxy_dt(du,[tmpx[i];0.499./ùëÉ.dx],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"And similarly in the other direction","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tmpu=fill(0.0,100)\ntmpv=fill(0.0,100)\ntmpy=fill(0.0,100)\nfor i=1:100\n    tmpy[i]=500.0 *i./ùëÉ.dx\n    dxy_dt(du,[0.499./ùëÉ.dx;tmpy[i]],ùëÉ,0.0)\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Compare recomputed velocities with those from pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"nSteps=2998\ntmpu=fill(0.0,nSteps); tmpv=fill(0.0,nSteps);\ntmpx=fill(0.0,nSteps); tmpy=fill(0.0,nSteps);\nrefu=fill(0.0,nSteps); refv=fill(0.0,nSteps);\nfor i=1:nSteps\n    dxy_dt_replay(du,[tmp[i,:lon],tmp[i,:lat]],tmp,tmp[i,:time])\n    refu[i]=du[1]./ùëÉ.dx\n    refv[i]=du[2]./ùëÉ.dx\n    dxy_dt(du,[tmp[i,:lon],tmp[i,:lat]]./ùëÉ.dx,ùëÉ,tmp[i,:time])\n    tmpu[i]=du[1]\n    tmpv[i]=du[2]\nend","category":"page"},{"location":"basics/detailed_look/#.-Compute-Trajectories","page":"Detailed Look","title":"6. Compute Trajectories","text":"","category":"section"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Solve through time using OrdinaryDiffEq.jl with","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"dxy_dt is the function computing dxy/dt\nuInit is the initial condition u @ tspan[1]\ntspan is the time interval\nuvetc are parameters for dxy_dt\nTsit5 is the time-stepping scheme\nreltol and abstol are tolerance parameters","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"tspan = (0.0,nSteps*3600.0)\n#prob = ODEProblem(dxy_dt_replay,uInit,tspan,tmp)\nprob = ODEProblem(dxy_dt,uInit,tspan,ùëÉ)\nsol = solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\nsol[1:4]","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"Compare recomputed trajectories with originals from MITgcm/pkg/flt","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"ref=transpose([tmp[1:nSteps,:lon] tmp[1:nSteps,:lat]])\nmaxLon=80*5.e3\nmaxLat=42*5.e3\nshow(size(ref))\nfor i=1:nSteps-1\n    ref[1,i+1]-ref[1,i]>maxLon/2 ? ref[1,i+1:end]-=fill(maxLon,(nSteps-i)) : nothing\n    ref[1,i+1]-ref[1,i]<-maxLon/2 ? ref[1,i+1:end]+=fill(maxLon,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]>maxLat/2 ? ref[2,i+1:end]-=fill(maxLat,(nSteps-i)) : nothing\n    ref[2,i+1]-ref[2,i]<-maxLat/2 ? ref[2,i+1:end]+=fill(maxLat,(nSteps-i)) : nothing\nend\nref=ref./ùëÉ.dx;","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"","category":"page"},{"location":"basics/detailed_look/","page":"Detailed Look","title":"Detailed Look","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#IndividualDisplacements.jl","page":"Introduction","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Inter-operability with common climate model grids and their representation in MeshArrays.jl is a central element (docs). IndividualDisplacements.jl can also read and plot trajectories using MIT General Circulation Model output or Ocean Drifting Buoy data (movie). It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015, Forget, 2018).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: simulated particle movie (95m))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Global Drifter Program data)","category":"page"},{"location":"worldwide/three_dimensional_ocean/#Three-Dimensions","page":"Three Dimensions","title":"Three Dimensions","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"(Image: ) (Image: )","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"Advect particles with climatological mean flow in three dimensions starting from a selected depth level (e.g. k=10 for 95 m) and region using a near-global ocean state estimate (OCCA which is here repeated for two years. For additional documentation e.g. see : 1, 2, 3, 4","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"(Image: Three dimensional simulation 1/2) (Image: Three dimensional simulation 2/2)","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.-Load-Software","page":"Three Dimensions","title":"1. Load Software","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"using IndividualDisplacements, DataFrames, OceanStateEstimation, NetCDF\nusing MeshArrays, OrdinaryDiffEq\n\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/example123.jl\"))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\nIndividualDisplacements.get_occa_velocity_if_needed();","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.1-Ocean-Circulation-Setup","page":"Three Dimensions","title":"2.1 Ocean Circulation Setup","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"nam=\"OCCA\"\nbck=false\n\nif nam==\"OCCA\"\n   ùëÉ,Œì=OCCA_setup(backward_in_time=bck)\n   üöÑ =dxyz_dt!\nelseif nam==\"LL90\"\n   ùëÉ,Œì=example3_setup(backward_in_time=bck)\n   üöÑ =dxy_dt\nelse\n   error(\"unknown example (nam parameter value)\")\nend","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.2-Solver-And-Analysis-Setup","page":"Three Dimensions","title":"2.2 Solver And Analysis Setup","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"function myüöÑ(du::Array{T,2},u::Array{T,2},ùëÉ::NamedTuple,tim) where T\n   nf=size(u,2)\n   nx=360\n   ny=160\n   [u[1,i][1]=mod(u[1,i][1],nx) for i in 1:nf]\n   [u[1,i][2]=mod(u[1,i][2],ny) for i in 1:nf]\n   [dxyz_dt!(du[i],u[i],ùëÉ,tim) for i=1:size(u,2)]\nend\n\nfunction ‚à´(prob)\n   #sol=solve(prob,Tsit5(),saveat=10*86400.0)\n   sol=IndividualDisplacements.solver_default(prob)\n   #sol=solve(prob,Euler(),dt=86400.0)\n   nx,ny=ùëÉ.ioSize[1:2]\n   nf=size(sol,2)\n   nt=size(sol,3)\n   [sol[1,i,j][1]=mod(sol[1,i,j][1],nx) for i in 1:nf, j in 1:nt]\n   [sol[1,i,j][2]=mod(sol[1,i,j][2],ny) for i in 1:nf, j in 1:nt]\n   return sol\nend\n\nfunction üîß(sol,ùëÉ::NamedTuple;id=missing,ùëá=missing)\n   df=postprocess_lonlat(sol,ùëÉ,id=id,ùëá=ùëá)\n\n   #add year (convenience time axis for plotting)\n   df.year=df.t ./86400/365\n\n   #add depth (i.e. the 3rd, vertical, coordinate)\n   k=[sol[1,i,j][3] for i in 1:size(sol,2), j in 1:size(sol,3)]\n   df.k=k[:] #level\n   k=Int.(floor.(df.k)); w=(df.k-k);\n   df.z=ùëÉ.RF[1 .+ k].*(1 .- w)+ùëÉ.RF[2 .+ k].*w #depth\n\n   #add one isotherm depth\n   Œ∏=0.5*(ùëÉ.Œ∏0+ùëÉ.Œ∏1)\n   d=isosurface(Œ∏,15,ùëÉ.RC)\n   d[findall(isnan.(d))].=0.\n   df.iso=interp_to_xy(df,exchange(d));\n\n   #add color = f(iso-z)\n   c=fill(:gold,length(df.iso))\n   c[findall(df.iso.<df.z)].=:violet\n   df.col=c\n\n   #to plot e.g. Pacific Ocean transports, shift longitude convention?\n   df.lon[findall(df.lon .< 0.0 )] = df.lon[findall(df.lon .< 0.0 )] .+360.0\n   return df\nend","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.3-Initialize-Individuals","page":"Three Dimensions","title":"2.3 Initialize Individuals","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"\"\"\"\n    set_up_individuals(ùëÉ,Œì,‚à´,üöÑ,üîß; nf=10000, z_init=4.5,\n               lon_rng=(-160.0,-150.0), lat_rng=(30.0,40.0))\n\nSet up `Individuals` data structure with `nf` particles moving within a near-global Ocean domain.\n\"\"\"\nfunction set_up_individuals(ùëÉ,Œì,‚à´,üöÑ,üîß; nf=10000,\n      z_init=4.5, lon_rng=(-160.0,-159.0), lat_rng=(30.0,31.0))\n\n   lo0,lo1=lon_rng\n   la0,la1=lat_rng\n\n   lon=lo0 .+(lo1-lo0).*rand(nf)\n   lat=la0 .+(la1-la0).*rand(nf)\n   #(xy,_)=initialize_lonlat(Œì,lon,lat)\n   #xy[3,:] .= z_init\n   #xy=cat(xy,ones(1,nf),dims=1)\n   dlo=21. - Œì[\"XC\"][1][21,1]\n   dla=111. - Œì[\"YC\"][1][1,111]\n\n   xy = permutedims([[lon[i]+dlo;lat[i]+dla;z_init;1.0] for i in eachindex(lon)])\n   id=collect(1:size(xy,2))\n\n   tr = DataFrame(ID=Int[], fid=Int[], x=Float64[], y=Float64[],\n                  k=Float64[], z=Float64[], iso=Float64[], t=Float64[],\n                  lon=Float64[], lat=Float64[], year=Float64[], col=Symbol[])\n\n   I=(position=xy,record=deepcopy(tr),velocity=myüöÑ, integration=‚à´,\n      postprocessing=üîß,parameters=ùëÉ)\n   ùêº=Individuals(I)\n\n   return ùêº\nend\n\nset_up_individuals(ùêº::Individuals; nf=10000) = set_up_individuals(ùëÉ,Œì,‚à´,üöÑ,üîß; nf=nf)\n\nùêº=set_up_individuals(ùëÉ,Œì,‚à´,üöÑ,üîß,nf=100)","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.1-Compute-Displacements","page":"Three Dimensions","title":"3.1 Compute Displacements","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"ùëá=(0.0,10*86400.0)\n\n‚à´!(ùêº,ùëá)","category":"page"},{"location":"worldwide/three_dimensional_ocean/#.2-Analyze-Results","page":"Three Dimensions","title":"3.2 Analyze Results","text":"","category":"section"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"The recorded simulation output, üî¥, is a in the DataFrames tabular format, which is easily manipulated or plotted.","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"either Plots.jl:","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"#include(joinpath(p,\"../examples/recipes_plots.jl\"))\n##PlotBasic(ùêº.üî¥,100,90.0)\n#p=plot_end_points(ùêº,Œì)\n#display(p)","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"or Makie.jl:","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"#include(joinpath(p,\"../examples/recipes_Makie.jl\"))\n#p=PlotMakie(ùêº.üî¥,100,180.);\n#display(p)","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"","category":"page"},{"location":"worldwide/three_dimensional_ocean/","page":"Three Dimensions","title":"Three Dimensions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/#Velocity-Interpolation","page":"Tool Box","title":"Velocity Interpolation","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"The dxy_dt, dxy_dt!, dxyz_dt, dxyz_dt!, etc functions compute the tracked individual velocity. ","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"dxy_dt\ndxy_dt!\ndxyz_dt\ndxyz_dt!\ndxy_dt_replay\ndxy_dt_CyclicArray","category":"page"},{"location":"API/#IndividualDisplacements.dxy_dt","page":"Tool Box","title":"IndividualDisplacements.dxy_dt","text":"dxy_dt(du,u,ùëÉ::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; NO halos) to position u (x,y) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/particle_cloud.jl\"))\nref=[29.381183342468674  19.890831699436823]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref,atol=1.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt!","page":"Tool Box","title":"IndividualDisplacements.dxy_dt!","text":"dxy_dt!(du,u,p::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (2D; with halos) to position u (x,y,fIndex) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/random_flow_field.jl\"))\nref=[4. 6.]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref,atol=10.0))\n\n# output\n\ntrue\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/worldwide/global_ocean_circulation.jl\"))\nref=[78. 88.]\nprod(isapprox.([mean(ùêº.üî¥.x) mean(ùêº.üî¥.y)],ref,atol=10.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxyz_dt","page":"Tool Box","title":"IndividualDisplacements.dxyz_dt","text":"dxyz_dt(du,u,ùëÉ::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (3D; NO halos) to position u (x,y,z) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/basics/solid_body_rotation.jl\"))\nref=[7.767441577479032 9.513402495574852 0.7065855989421701]\nprod(isapprox.(ùêº.üìå',ref,atol=1.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxyz_dt!","page":"Tool Box","title":"IndividualDisplacements.dxyz_dt!","text":"dxyz_dt!(du,u,p::NamedTuple,tim)\n\nInterpolate velocity from gridded fields (3D; with halos) to position u (x,y,z,fIndex) to compute the derivative of position v time  du_dt.\n\nusing IndividualDisplacements, Statistics\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"../examples/worldwide/three_dimensional_ocean.jl\"))\nref=[211. 34. -70.]\nprod(isapprox.([mean(ùêº.üî¥.lon) mean(ùêº.üî¥.lat) mean(ùêº.üî¥.z)],ref,atol=50.0))\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt_replay","page":"Tool Box","title":"IndividualDisplacements.dxy_dt_replay","text":"dxy_dt_replay(du,u,p::DataFrame,t)\n\nInterpolate velocity from MITgcm float_trajectories output and return position increment du.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.dxy_dt_CyclicArray","page":"Tool Box","title":"IndividualDisplacements.dxy_dt_CyclicArray","text":"dxy_dt_CyclicArray(du,u,ùëÉ::NamedTuple,tim)\n\nNearest neighbor (?) velocity from gridded fields (2D; NO halos but not needed when CyclicArrays is used to extend valid indice ranges).\n\nnotes: spatial interpolation & temporal interpolation are lacking\n\n\n\n\n\n","category":"function"},{"location":"API/#Setup-And-Postprocessing","page":"Tool Box","title":"Setup And Postprocessing","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"Convenience functions to initialize a simulation and posprocess the output are provided. ","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"initialize_lonlat\nrandn_lonlat\npostprocess_lonlat\npostprocess_xy","category":"page"},{"location":"API/#IndividualDisplacements.initialize_lonlat","page":"Tool Box","title":"IndividualDisplacements.initialize_lonlat","text":"initialize_lonlat(Œì,lon,lat ; msk=missing)\n\nDefine initial condition (u0,du) in grid coordinates (Œì) from longitude & latitude vectors (lon,lat) optionally with a land mask (msk).\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.randn_lonlat","page":"Tool Box","title":"IndividualDisplacements.randn_lonlat","text":"randn_lonlat(nn=1,seed=missing)\n\nRandomly distributed longitude, latitude positions on the sphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_lonlat","page":"Tool Box","title":"IndividualDisplacements.postprocess_lonlat","text":"postprocess_lonlat(sol,ùëÉ::NamedTuple; id=missing, ùëá=missing)\n\nCopy sol to a DataFrame & map position to lon,lat coordinates using \"exchanged\" ùëÉ.XC, ùëÉ.YC via add_lonlat!\n\n\n\n\n\n","category":"function"},{"location":"API/#IndividualDisplacements.postprocess_xy","page":"Tool Box","title":"IndividualDisplacements.postprocess_xy","text":"postprocess_xy()\n\nCopy sol to a DataFrame & map position to x,y coordinates, and define time axis for a simple doubly periodic domain\n\n\n\n\n\n","category":"function"},{"location":"API/#Read-Output-From-File","page":"Tool Box","title":"Read Output From File","text":"","category":"section"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"Trajectory simulated by the MITgcm or observed by the global drifter program can be read from file using, respectively MITgcmTools.read_flt or  read_drifters.","category":"page"},{"location":"API/","page":"Tool Box","title":"Tool Box","text":"read_drifters","category":"page"},{"location":"API/#IndividualDisplacements.read_drifters","page":"Tool Box","title":"IndividualDisplacements.read_drifters","text":"read_drifters(pth,lst;chnk=Inf,rng=(missing,missing))\n\nRead near-surface drifter data from the Global Drifter Program into a DataFrame.\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth,list=drifter_files()\ndf=read_drifters( pth*lst[end],chnk=1000,rng=(2014.1,2014.2) )\n#sort!(df, [:t, :lat])\n#CSV.write(pth*\"Drifter_hourly_2005_2019.csv\", df)\n\n\n\n\n\nread_drifters( pth, lst )\n\nRead near-surface hourly drifter data from the Global Drifter Program into a DataFrame.\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth,list=drifter_files()\ndf=read_drifters( pth, lst)\n\n\n\n\n\n","category":"function"}]
}
